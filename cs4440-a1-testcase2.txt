


Federal Information Processing Standards Publication 197

November 26, 2001

Announcing the
ADVANCED ENCRYPTION STANDARD (AES)

Federal Information Processing Standards Publications (FIPS PUBS) are issued by the National 
Institute of Standards and Technology (NIST) after approval by the Secretary of Commerce pursuant 
to Section 5131 of the Information Technology Management Reform Act of 1996 (Public Law 104-106) 
and the Computer Security Act of 1987 (Public Law 100-235).


1.   Name of Standard. Advanced Encryption Standard (AES) (FIPS PUB 197).
2.   Category of Standard. Computer Security Standard, Cryptography.
3.   Explanation.  The Advanced Encryption Standard (AES) specifies a FIPS-approved cryptographic 
algorithm that can be used to protect electronic data.  The AES algorithm is a symmetric block 
cipher that can encrypt (encipher) and decrypt (decipher) information. Encryption converts data to 
an unintelligible form called ciphertext;  decrypting the ciphertext converts the data back into 
its original form, called plaintext.
The AES algorithm is capable of using cryptographic keys of 128, 192, and 256 bits to encrypt and 
decrypt data in blocks of 128 bits.
4.   Approving Authority. Secretary of Commerce.
5.   Maintenance Agency. Department of Commerce, National Institute of Standards and Technology, 
Information Technology Laboratory (ITL).
6.   Applicability. This standard may be used by Federal departments and agencies when an agency 
determines that sensitive (unclassified) information (as defined in P. L. 100-235) requires 
cryptographic protection.
Other FIPS-approved cryptographic algorithms may be used in addition to, or in lieu of, this 
standard. Federal agencies or departments that use cryptographic devices for protecting classified 
information can use those devices for protecting sensitive (unclassified) information in lieu of 
this standard.
In addition, this standard may be adopted and used by non-Federa1 Government organizations. Such 
use is encouraged when it provides the desired security for commercial and private organizations.



7.   Specifications. Federal  Information  Processing  Standard  (FIPS)  197,  Advanced Encryption 
Standard (AES) (affixed).
8.   Implementations. The algorithm specified in this standard may be implemented in software, 
firmware, hardware, or any combination thereof. The specific implementation may depend on several 
factors such as the application, the environment, the technology used, etc. The algorithm shall be 
used in conjunction with a FIPS approved or NIST recommended mode of operation. Object Identifiers 
(OIDs) and any associated parameters for AES used in these modes are  available  at  the  Computer  
Security  Objects  Register  (CSOR),  located  at http://csrc.nist.Nov/csor/ [2].
Implementations of the algorithm that are tested by an accredited laboratory and validated will be 
considered as complying with this standard. Since cryptographic security depends on many factors 
besides the correct implementation of an encryption algorithm, Federal Government employees, and 
others, should also refer to NIST Special Publication 800-21, Guideline for Implementing 
Cryptography in the Federal Government, for additional information and guidance (NIST SP 800-21 is 
available at http://csrc.nist.Nov/publications/).
9.   Implementation Schedule. This standard becomes effective on May 26, 2002.
10.   Patents. Implementations of the algorithm specified in this standard may be covered by
U.S. and foreign patents.
11.   Export Control. Certain cryptographic devices and technical data regarding them are subject 
to Federal export controls. Exports of cryptographic modules implementing this standard and 
technical data regarding them must comply with these Federal regulations and be licensed by the 
Bureau of Export Administration of the U.S. Department of Commerce. Applicable Federal government 
export controls are specified in Title 15, Code of Federal Regulations (CFR) Part 740.17; Title 15, 
CFR Part 742; and Title 15, CFR Part 774, Category 5, Part 2.
12.   Qualifications.  NIST will continue to follow developments in the analysis of the AES 
algorithm. As with its other cryptographic algorithm standards, NIST will formally reevaluate this 
standard every five years.
Both this standard and possible threats reducing the security provided through the use of this 
standard will undergo review by NIST as appropriate, taking into account newly available analysis 
and technology. In addition, the awareness of any breakthrough in technology or any mathematical 
weakness of the algorithm will cause NIST to reevaluate this standard and provide necessary 
revisions.
13.   Waiver Procedure. Under certain exceptional circumstances, the heads of Federal agencies, or 
their delegates, may approve waivers to Federal Information Processing Standards (FIPS).  The heads 
of such agencies may redelegate such authority only to a senior official designated pursuant to 
Section 3506(b) of Title 44, U.S. Code. Waivers shall be granted only when compliance with this 
standard would
a. adversely affect the accomplishment of the mission of an operator of Federal computer system or
b. cause a major adverse financial impact on the operator that is not offset by government- wide 
savings.



i1



Agency heads may act upon a written waiver request containing the information detailed above. 
Agency heads may also act without a written waiver request when they determine that conditions for 
meeting the standard cannot be met. Agency heads may approve waivers only by a written decision 
that explains the basis on which the agency head made the required finding(s). A copy of each such 
decision, with procurement sensitive or classified portions clearly identified, shall be sent to: 
National Institute of Standards and Technology; ATTN: FIPS Waiver Decision, Information Technology 
Laboratory, 100 Bureau Drive, Stop 8900, Gaithersburg, MD 20899- 8900.
In addition, notice of each waiver granted and each delegation of authority to approve waivers 
shall be sent promptly to the Committee on Government Operations of the House of Representatives 
and the Committee on Government Affairs of the Senate and shall be published promptly in the 
Federal Register.
When the determination on a waiver applies to the procurement of equipment and/or services, a 
notice of the waiver determination must be published in the Commerce Business Daily as a part of 
the notice of solicitation for offers of an acquisition or, if the waiver determination is made 
after that notice is published, by amendment to such notice.
A copy of the waiver, any supporting documents, the document approving the waiver and any 
supporting and accompanying documents, with such deletions as the agency is authorized and decides 
to make under Section 552(b) of Title 5, U.S. Code, shall be part of the procurement documentation 
and retained by the agency.
14.   Where to obtain copies. This publication is available electronically by accessing 
http://csrc.nist.eov/publications/. A list of other available computer security publications, 
including ordering information, can be obtained from NIST Publications List 91, which is available 
at the same web site. Alternatively, copies of NIST computer security publications are available 
from: National Technical Information Service (NTIS), 5285 Port Royal Road, Springfield, VA 22161.




















ili



























































iv




Federal Information Processing Standards Publication 197

November 26, 2001

Specification for the
ADVANCED ENCRYPTION STANDARD (AES)

Table of Contents

1.   INTRODUCTION.                                               5
2.   DEFINITIONS                                                5
2.1  GLOSSARY OF TERMS AND ACRONYMS                                     5
2.2  ALGORITHM PARAMETERS, SYMBOLS, AND FUNCTIONS.                          6
3.  NOTATION AND CONVENTIONS.                                     7
3.1
3.2                                                         8
3.3                                                         8
3.4
3.5  THE STATE AS AN ARRAY OF COLUMNS.                                   10
4.   MATHEMATICAL PRELIMINARIES                                   10
4.1  ADDITION.                                                  10
4.2  MULTIPLICATION                                               10
4.2.7   Multiplication by x.                                         77
4.3  POLYNOMIALS WITH COEFFICIENTS IN GF(2 )                               12
5.   ALGORITHM SPECIFICATION.                                      13
5.1  CIPHER                                                    14
5.7. 7   :SokB  tee  () Transformation.                                   US
5.7. 2   :SL I Ek Rons () Transformation                                   77
5.7. 3   NJzCo2 umrc () Transformation.                                  7 7
5.7.4   Aññfio ondKe y ()  Transformation                                 78



5.3.7   Jr v:SL I ftfio s  () Transformation.                                27
5.3.2   lr vS okB y es () Transformation                                 22
5.3.3   lr vN? xho2 cmm s () Transformation.                               23
5.3.4   Inverse of the PddR oor dKey () Transformation.                         23
5.3.5   Equivalent Inverse Cipher                                      23

6.   IMPLEMENTATION ISSUES                                       25
6. 1  KEY LENGTH REQUIREMENTS                                        25
6.2  KEYING RESTRICTIONS                                            26
6.3  PARAMETERIZATION OF KEY LENGTH, BLOCK SIZE, AND ROUND NUMBER                 26
6.4  IMPLEMENTATION SUGGESTIONS REGARDING VARIOUS PLATFORMS.                  26

APPENDIX A - KEY EXPANSION EXAMPLES                                 27
A. l  EXPANSION OF A 128-BIT CIPHER KEY.                                    27
A.2  EXPANSION OF A 192-BIT CIPHER KEY.                                    28
A.3  EXPANSION OF A 256-BIT CIPHER KEY.                                   30

APPENDIX B — CIPHER EXAMPLE.                                       33

APPENDIX C — EXAMPLE VECTORS.                                     35
C.1  AES-128 (N€—4, NR=10)                                         35
C.2  AES-192 (Nx—6, N =12)                                         38
C.3  AES-256 (NK—8, N =14)                                         42

APPENDIX D - REFERENCES.                                          47
























2




Table of Figures
Figure 1.  Hexadecimal representation of bit patterns.                      8
Figure 2.  Indices for Bytes and Bits.                                9
Figure 3.  State array input and output.                               9
Figure 4.  Key-Block-Round Combinations.                           14
Figure 5.  Pseudo Code for the Cipher.                              15
Figure 6.  SubB yLe s ( ) applies the S—box to each byte of the State.             16
Figure 7.  S-box: substitution values for the byte xy (in hexadecimal format)         16
Figure 8.  Shi f L Row s ( ) cyclically shifts the last three rows in the State          17
Figure 9.  Mi xCo1 umns ( ) operates on the State column-by-column.            18
Figure 10. AddRoundKe y ( ) XORs each column of the State with a word from the key schedule.        
                                 19
Figure 11. Pseudo Code for Key Expansion.                           20
Figure 12. Pseudo Code for the Inverse Cipher.                          21
Figure 13. I nv Shi f fiRow s ( ) cyclically shifts the last three rows in the State.        22
Figure 14. Inverse S-box: substitution values for the byte xy (in hexadecimal format)     22
Figure 15. Pseudo Code for the Equivalent Inverse Cipher.                   25






















3



























































4




1.  Introduction
This standard specifies the Rijndael algorithm ([3] and [4]), a symmetric block cipher that can 
process data blocks of 128 bits, using cipher keys with lengths of 128, 192, and 256 bits. Rijndael 
was designed to handle additional block sizes and key lengths, however they are not adopted in this 
standard.
Throughout the remainder of this standard, the algorithm specified herein will be referred to as 
“the AES algorithm.” The algorithm may be used with the three different key lengths indicated 
above, and therefore these different “flavors” may be referred to as “AES-128”, “AES-192”, and 
“AES-256”.
This specification includes the following sections:
2. Definitions of terms, acronyms, and algorithm parameters, symbols, and functions;
3. Notation and conventions used in the algorithm specification, including the ordering and 
numbering of bits, bytes, and words;
4. Mathematical properties that are useful in understanding the algorithm;
5. Algorithm specification, covering the key expansion, encryption, and decryption routines;
6. Implementation issues, such as key length support, keying restrictions, and additional 
block/key/round sizes.
The standard concludes with several appendices that include step-by-step examples for Key Expansion 
and the Cipher, example vectors for the Cipher and Inverse Cipher, and a list of references.

2.  Definitions

2.1  Glossary of Terms and Acronyms
The following definitions are used throughout this standard: AES       Advanced Encryption Standard
Affine       A transformation consisting of multiplication by a matrix followed by Transformation  
the addition of a vector.
Array       An enumerated collection of identical entities (e.g., an array of bytes). Bit         A 
binary digit having a value of 0 or 1.
Block       Sequence of binary bits that comprise the input, output, State, and Round Key. The 
length of a sequence is the number of bits it contains. Blocks are also interpreted as arrays of 
bytes.
Byte        A group of eight bits that is treated either as a single entity or as an array of 8 
individual bits.


5



Cipher      Series of transformations that converts plaintext to ciphertext using the Cipher Key.
Cipher Key    Secret, cryptographic key that is used by the Key Expansion routine to generate a set 
of Round Keys; can be pictured as a rectangular array of bytes, having four rows and Nk columns.
Ciphertext    Data output from the Cipher or input to the Inverse Cipher.
Inverse Cipher  Series of transformations that converts ciphertext to plaintext using the Cipher 
Key.
Key Expansion  Routine used to generate a series of Round Keys from the Cipher Key. Plaintext     
Data input to the Cipher or output from the Inverse Cipher.
Rijndael      Cryptographic  algorithm  specified  in this Advanced Encryption Standard (AES).
Round Key    Round keys are values derived from the Cipher Key using the Key Expansion routine; 
they are applied to the State in the Cipher and Inverse Cipher.

State S-box

Word
Intermediate Cipher result that can be pictured as a rectangular array of bytes, having four rows 
and Nb columns.
Non-linear  substitution  table  used  in  several  byte  substitution transformations and in the 
Key Expansion routine to perform a one- for-one substitution of a byte value.
A group of 32 bits that is treated either as a single entity or as an array of 4 bytes.

2.2  Algorithm Parameters, Symbols, and Functions
The following algorithm parameters, symbols, and functions are used throughout this standard:
AddRoun‹fKey ( )  Transformation in the Cipher and Inverse Cipher in which a Round Key is added to 
the State using an XOR operation. The length of a Round Key equals the size of the State (i.e., for 
Nb — 4, the Round Key length equals 128 bits/16 bytes).
InvMixColumns()Transformation in the Inverse Cipher that is the inverse of
MixColumns().

InvShiftRows() InvSubBytes()
Transformation in the Inverse Cipher that is the inverse of
ShiftRows().
Transformation in the Inverse Cipher that is the inverse of
SubBytes().
Cipher Key.




6




MixColumns ( )


Nb Nk Nr
Rcon[]
RotWord() ShiftRows() SubBytes()

Sublfo:cd ( )


XOR
Transformation in the Cipher that takes all of the columns of the State and mixes their data 
(independently of one another) to produce new columns.
Number of columns (32-bit words) comprising the State. For this standard, Nb — 4. (Also see Sec. 
6.3.)
Number of 32-bit words comprising the Cipher Key. For this standard, Nk — 4, 6, or 8. (Also see 
Sec. 6.3.)
Number of rounds, which is a function of Nk and Nb (which is fixed). For this standard, Nr — 10, 
12, or 14. (Also see Sec. 6.3.)
The round constant word array.
Function used in the Key Expansion routine that takes a four-byte word and performs a cyclic 
permutation.
Transformation in the Cipher that processes the State by cyclically shifting the last three rows of 
the State by different offsets.
Transformation in the Cipher that processes the State using a non- linear byte substitution table 
(S-box) that operates on each of the State bytes independently.
Function used in the Key Expansion routine that takes a four-byte input word and applies an S-box 
to each of the four bytes to produce an output word.
Exclusive-OR operation. Exclusive-OR operation.
Multiplication of two polynomials (each with degree < 4) modulo
g4+ i.
Finite field multiplication.

3.  Notation and Conventions

3.1  Inputs and Outputs
The input and output for the AES algorithm each consist of sequences of 128 bits (digits with 
values of 0 or 1). These sequences will sometimes be referred to as blocks and the number of bits 
they contain will be referred to as their length. The Cipher Key for the AES algorithm is a 
sequence of 128, 192 or 256 bits. Other input, output and Cipher Key lengths are not permitted by 
this standard.
The bits within such sequences will be numbered starting at zero and ending at one less than the 
sequence length (block length or key length). The number i attached to a bit is known as its index 
and will be in one of the ranges 0 ñ i < 128, 0 ñ i < 192 or 0 ñ i < 256 depending on the block 
length and key length (specified above).

7



3.2  Bytes
The basic unit for processing in the AES algorithm is a byte, a sequence of eight bits treated as a 
single entity. The input, output and Cipher Key bit sequences described in Sec. 3.1 are processed 
as arrays of bytes that are formed by dividing these sequences into groups of eight contiguous bits 
to form arrays of bytes (see Sec. 3.3). For an input, output or Cipher Key denoted by a, the bytes 
in the resulting array will be referenced using one of the two forms, an Or a[n], where n will be 
in one of the following ranges:

Key length = 128 bits,  0 ñ o < 16; Key length = 192 bits,  0 S n < 24; Key length = 256 bits,  0 ñ 
n < 32.
Block length = 128 bits, 0 ñ o < 16;
All byte values in the AES algorithm will be presented as the concatenation of its individual bit 
values (0 or l) between braces in the order {b7. b6, b5. b4. b3. bz. b , bo1  These bytes are 
interpreted as finite field elements using a polynomial representation:
7

f› x⁷ + b,x⁶ + f› x ⁵ + f› x ⁴ + b x + b x ² + b x + by =  b,x'
(3.1)
7         5     4     3     2

For example, (011 0 0 011} identifies the specific finite field element x⁶ + x ˢ + x + 1 .
It is also convenient to denote byte values using hexadecimal notation with each of two groups of 
four bits being denoted by a single character as in Fig. 1.

Bit Pattern
0000
0001
0010
0011
Character
0
1
2
3
Bit Pattern
0100
0101
0110
0111
Character
4
5
6
7
Bit Pattern
1000
1001
1010
1011
Character
8
9
a b
Bit Pattern
1100
1101
1110
1111
Character
c d e f
Figure 1. Hexadecimal representation of bit patterns.

Hence the element (0 ll 0 0 0 11} can be represented as ( 63}, where the character denoting the 
four-bit group containing the higher numbered bits is again to the left.
Some finite field operations involve one additional bit (b8) to the left of an 8-bit byte. Where 
this extra bit is present, it will appear as (01} immediately preceding the 8-bit byte; for 
example, a 9-bit sequence will be presented as (01} (lb}.

3.3  Arrays of Bytes
Arrays of bytes will be represented in the following form:
a a a-2..no5
The bytes and the bit ordering within bytes are derived from the 128-bit input sequence
inpu‹oinput inpu!z .. inp«i 26 ‹ p 127
as follows:


8



at = (inp«o,inpB i, .., inp«71



ai5 = {inp«12o, iDp«121, ., inp«127
The pattern can be extended to longer sequences (i.e., for 192- and 256-bit keys), so that, in 
general,
(3.2)


Taking Sections 3.2 and 3.3 together, Fig. 2 shows how bits within each byte are numbered.
Input bit sequence   0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  
22  23
Byte number             0                  1                 2
Bit numbers in byte  7  6  5  4  3  2  1  0  7  6  5  4  3  2  1  0  7  6  5  4  3  2  1  0
Figure 2. Indices for Bytes and Bits.

3.4  The State
Internally, the AES algorithm's operations are performed on a two-dimensional array of bytes called 
the State. The State consists of four rows of bytes, each containing Nb bytes, where Nb is the 
block length divided by 32. In the State array denoted by the symbol s, each individual byte has 
two indices, with its row number r in the range 0 ñ r < 4 and its column number c in the range 0 ñ 
c < Nb. This allows an individual byte of the State to be referred to as either sr,‹ or s[r,c]. For 
this standard, Nb—4, i.e., 0 ñ c < 4 (also see Sec. 6.3).
At the start of the Cipher and Inverse Cipher described in Sec. 5, the input — the array of bytes 
ioo, int, ... ini5 — is copied into the State array as illustrated in Fig. 3. The Cipher or Inverse 
Cipher operations are then conducted on this State array, after which its final value is copied to 
the output — the array of bytes on o. oB i  . . oo/t5.

input bytes           State array           output bytes


0,0
50,1
0,2
S0,3




2,0

S2,1

2,2

52,3
oof2
oo/6 outer oofl4


3,0
3,1
3,2
S3 3
Figure 3. State array input and output.

Hence, at the beginning of the Cipher or Inverse Cipher, the input array, in, is copied to the 
State array according to the scheme:
s[r, c] = in[r + 4c]       for 0 ñ r < 4 and 0 ñ c < Nb,        (3.3)



9



and at the end of the Cipher and Inverse Cipher, the State is copied to the output array out as 
follows:

out[r + 4c] = s[r, c]      for 0 ñ r < 4 and 0 ñ c < Nb.
3.5  The State as an Array of Columns
(3.4)
The four bytes in each column of the State array form 32-bit words, where the row number r provides 
an index for the four bytes within each word. The state can hence be interpreted as a 
one-dimensional array of 32 bit words (columns),   .w , where the column number c provides an index 
into this array. Hence, for the example in Fig. 3, the State can be considered as an array of four 
words, as follows:


0  N 0,0 1,0 2,0 53, 0

2  0,2 1, 2 2, 2 53,2


(3.5)


4.  Mathematical Preliminaries
All bytes in the AES algorithm are interpreted as finite field elements using the notation 
introduced in Sec. 3.2. Finite field elements can be added and multiplied, but these operations are 
different from those used for numbers. The following subsections introduce the basic mathematical 
concepts needed for Sec. 5.

4.1  Addition
The addition of two elements in a finite field is achieved by “adding” the coefficients for the 
corresponding powers in the polynomials for the two elements. The addition is performed with the 
XOR operation (denoted by O ) - i.e., modulo 2 - so that 1 0 1 = 0, 1 0 0 = 1, and 0 0 0 = 0. 
Consequently, subtraction of polynomials is identical to addition of polynomials.
Alternatively, addition of finite field elements can be described as the modulo 2 addition of 
corresponding bits in the byte. For two bytes (a7a6a,a4a n2a a,} and (b7b6b b4b3b b b 1, the sum is 
(C7C6C,C4C3C2cicut where each Ci  ai  b, (i.e., c7 — a7  b7, c, = a6  b6, ..cv= as  b )
For example, the following expressions are equivalent to one another:
(x⁶ + x⁴ + x² + x + i) + (x⁷ +  + 1) = x⁷+  6+  4+  2   (polynomial notation);


{01010111} O {10000011}=(11010100}
{57} O {83}={d4}
(binary notation); (hexadecimal notation).

4.2  Multiplication
In the polynomial representation, multiplication in GF(2⁸) (denoted by •) corresponds with the 
multiplication of polynomials modulo an irreducible polynomial of degree 8. A polynomial is 
irreducible if its only divisors are one and itself. For the AES algorithm, this irreducible 
polynomial is
(4.1)


10



or (01 } {lb} in hexadecimal notation.
For example, {5 7 } • {8 3} = {c 1}, because
(x ⁶ + x ⁴+  2+ x + l) (x ⁷ + x + 1)       x’' + x'’+  9 + x' +  7+







and

13+  11+  9+  8+  6+  5+  4+  3 + 1 mo du l o ( x' + x ⁴ + x ³ + x + 1 )
7+  6 + 1 .
The modular reduction by m(x) ensures that the result will be a binary polynomial of degree less 
than 8, and thus can be represented by a byte. Unlike addition, there is no simple operation at the 
byte level that corresponds to this multiplication.
The multiplication defined above is associative, and the element (01} is the multiplicative 
identity. For any non-zero binary polynomial b(x) of degree less than 8, the multiplicative inverse 
of b(x), denoted b I(x), can be found as follows: the extended Euclidean algorithm [7] is used to 
compute polynomials a(x) and c(x) such that

b(x)a(x) + m(x)c(x) = 1.
Hence, a(x)• b(x) mod m(x) - 1, which means
b°' (x) = a(x) mod m(x).
Moreover, for any a(x), b(x) and c(x) in the field, it holds that
a(x)• (b(x) + c(x)) * a(x) • b(x) + a(x) • c(x) .
(4.2)


(4.3)
It follows that the set of 256 possible byte values, with XOR used as addition and the 
multiplication defined as above, has the structure of the finite field GF(2').

4.2.1 Multiplication by x
Multiplying the binary polynomial defined in equation (3.1) with the polynomial x results in
b x  + b x ⁷ + b x ⁶ + b x ⁵ + b x ⁴ + b x  + b, x ² + b x .          (4.4)
The result x • b(x) is obtained by reducing the above result modulo m(x), as defined in equation 
(4.1). If b — 0, the result is already in reduced form. If b7  1, the reduction is accomplished by 
subtracting (i.e., XORing) the polynomial m(x).  It follows that multiplication by x (i.e.,
(0 0 0 0 0 010} or (0 2}) can be implemented at the byte level as a left shift and a subsequent 
conditional bitwise XOR with {lb}.  This operation on bytes is denoted by xfi ime ( ) . 
Multiplication by higher powers of x can be implemented by repeated application of xc ime ( ) By 
adding intermediate results, multiplication by any constant can be implemented.
For example, {5 7 } • (13} = (fe} because

11










thus,
{57}• (02} =xtime({57})=(ae}
(57)• {04} =xtime(ae})={47}
(57)• {08} =xtime((47})={8e}
{57}• {10} =xtime({8e})=(07}


{57}• {13} = {57}•({01 D {02} D {10})
= (57} O (ae} D {07}
{fe}.

4.3  Polynomials with Coefficients in GF(2 )
Four-term polynomials can be defined - with coefficients that are finite field elements - as:
a(x) - a x’ + n x² + a x + a                (4.5)
which will be denoted as a word in the form [ao, a , 2, 3 ]. Note that the polynomials in this 
section behave somewhat differently than the polynomials used in the definition of finite field 
elements, even though both types of polynomials use the same indeterminate, x. The coefficients in 
this section are themselves finite field elements, i.e., bytes, instead of bits; also, the 
multiplication of four-term polynomials uses a different reduction polynomial, defined below.
The distinction should always be clear from the context.
To illustrate the addition and multiplication operations, let
b(x) - bix’ + b x² + b x + b                (4.6)
define a second four-term polynomial.  Addition is performed by adding the finite field 
coefficients of like powers of x. This addition corresponds to an XOR operation between the 
corresponding bytes in each of the words — in other words, the XOR of the complete word values.
Thus, using the equations of (4.5) and (4.6),
a(x) + b(x) - (a O b )x’ + (a O b )x² +(a, O b, )x + (at O b )         (4.7)
Multiplication is achieved in two steps. In the first step, the polynomial product c(x) = a(x) • 
b(x) is algebraically expanded, and like powers are collected to give



where
c(x) - c6=6 + C 5 + c
4 + clx' + c
cx2 + c
v=+ ct
(4.8)





(4.9)



12





The result, c(x), does not represent a four-byte word. Therefore, the second step of the 
multiplication is to reduce c(x) modulo a polynomial of degree 4; the result can be reduced to a 
polynomial of degree less than 4. For the AES algorithm, this is accomplished with the polynomial 
x⁴ + 1, so that
x' mod(x⁴ + 1) = x'‘°ᵈ⁴ .                  (4.10)
The modular product of a(x) and b(x), denoted by a(x) O b(x), is given by the four-term polynomial 
d(x), defined as follows:



with
d(x) - d,x³ + d x² + d, x + d


dv= (as• f› ) ° (a, • b,)  (a • f›₂) O (a•s



b3)
(4.11)

d - (a-s
be) ° (at • b ) O (a₃ • be) O (a₂ • b₃)
(4.12)
dv= (a₂ • be) ° (a, • b,) O (no• be) ° (a₃ • b )
d - (at • be) ! (no• b,)  (a, • be) ! (as• b )
When a(x) is a fixed polynomial, the operation defined in equation (4.11) can be written in matrix 
form as:


(4.13)



Because x⁴ + 1 is not an irreducible polynomial over GF(2 ), multiplication by a fixed four-term 
polynomial is not necessarily invertible. However, the AES algorithm specifies a fixed four-term 
polynomial that does have an inverse (see Sec. 5.1.3 and Sec. 5.3.3):
a(x) = {0 3}x³ + {01}x + (01}x + {0 2 }           (4.14)
a ¹(x) = (0b}x³ + (0 d}x² + (0 9}x + (0 e}.           (4.15)
Another polynomial used in the AES algorithm (see the RofiWord ( ) function in Sec. 5.2) has ao
— ai = nz = (0 0 } and a3= (01}, which is the polynomial x³. Inspection of equation (4.13) above 
will show that its effect is to form the output word by rotating bytes in the input word. This 
means that [bo. bi, b2, b3] is transformed into [b , bz b3, bo]

5.  Algorithm Specification
For the AES algorithm, the length of the input block, the output block and the State is 128 bits.  
This is represented by Nb — 4, which reflects the number of 32-bit words (number of columns) in the 
State.


13



For the AES algorithm, the length of the Cipher Key, A, is 128, 192, or 256 bits. The key length is 
represented by Nk — 4, 6, or 8, which reflects the number of 32-bit words (number of columns) in 
the Cipher Key.
For the AES algorithm, the number of rounds to be performed during the execution of the algorithm 
is dependent on the key size. The number of rounds is represented by Nr, where Mr — 10 when Nâ — 4, 
Nr — 12 when Nâ — 6, and Mr — 14 when Nâ — 8.
The only Key-Block-Round combinations that conform to this standard are given in Fig. 4. For 
implementation issues relating to the key length, block size and number of rounds, see Sec. 6.3.





AES-128 AES-192 AES-256
Key Length
(Nk words)

4
6
8
Block Size
(Nb words)

4
4
4
Number of Rounds
(Mr)
10
12
14
Figure 4. Key-Block-Round Combinations.
For both its Cipher and Inverse Cipher, the AES algorithm uses a round function that is composed  
of four different  byte-oriented  transformations: 1) byte substitution  using a substitution table 
(S-box), 2) shifting rows of the State array by different offsets, 3) mixing the data within each 
column of the State array, and 4) adding a Round Key to the State.  These transformations (and 
their inverses) are described in Sec. 5.1.1-5.1.4 and 5.3.1-5.3.4.
The Cipher and Inverse Cipher are described in Sec. 5.1 and Sec. 5.3, respectively, while the Key 
Schedule is described in Sec. 5.2.

5.1  Cipher
At the start of the Cipher, the input is copied to the State array using the conventions described 
in Sec. 3.4. After an initial Round Key addition, the State array is transformed by implementing a 
round function 10, 12, or 14 times (depending on the key length), with the final round differing 
slightly from the first Mr - l rounds. The final State is then copied to the output as described in 
Sec. 3.4.
The round function is parameterized using a key schedule that consists of a one-dimensional array 
of four-byte words derived using the Key Expansion routine described in Sec. 5.2.
The Cipher is described in the pseudo code in Fig. S. The individual transformations - SubByfles ( 
) , Shi:fflRows ( ) , MixColumns ( ) , and AddRoundKey ( ) — process the State and are described in 
the following subsections. In Fig. 5, the array w [ ] contains the key schedule, which is described 
in Sec. 5.2.
As shown in Fig. 5, all Nr rounds are identical with the exception of the final round, which does 
not include the MixColumns ( ) transformation.


14



Appendix B presents an example of the Cipher, showing values for the State array  at the beginning 
of each round and after the application of each of the four transformations described in the 
following sections.
Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)]) begin
byte state[4,Nb]

state = in

AddRoundKey(state, w[0, Nb-1])      // See Sec. 5.1.4

for round = 1 step 1 to Nr-1
SubBytes(state)          // See Sec. 5.1.1
ShiftRows(state)          // See Sec. 5.1.2
MixColumns(state)         // See Sec. 5.1.3 AddRoundKey(state, w[round*Nb, (round+l)*Nb-1])
end for

SubBytes(state) ShiftRows(state)
AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])

out = state
end

Figure 5. Pseudo Code for the Cipher.’


5.1.1 SzzbBytes ( ) Transformation
The SubByhes ( ) transformation is a non-linear byte substitution that operates independently on 
each byte of the State using a substitution table (S-box). This S-box (Fig. 7), which is 
invertible, is constructed by composing two transformations:
1. Take the multiplicative inverse in the finite field GF(2 ), described in Sec. 4.2; the element 
(0 0} is mapped to itself.
2. Apply the following affine transformation (over GF(2) ):
(5.1)
for 0 ñ i < 8, where bi is the iᵗʰ bit of the byte, and c, is the ⁻ᵗʰ bit of a byte c with the 
value { 63} or {0110 0 0 11}. Here and elsewhere, a prime on a variable (e.g., b’) indicates that 
the variable is to be updated with the value on the right.
In matrix form, the affine transformation element of the S-box can be expressed as:




¹ The various transformations (e.g., SubByfies ( ) , Shi ffiRows ( ) , etc.) act upon the State 
array that is addressed by the ‘ s I.at e’ pointer. AddRoundftey ( ) uses an additional pointer to 
address the Round Key.

15



¯b' ¯ ¯1 0 0 0 1 1 1 1¯¯b₀ ¯ ¯1¯

¯0 ¯ ¯
¯¯ ¯ ¯ ¯
b'   1  1  0  0  0  1  1  1  b₁    1
¯1 ¯ ¯             ¯¯ ¯ ¯ ¯

¯b' ¯
¯1 1 1 0 0 0 1 1¯¯b2 ¯
¯0¯

¯² ¯ ¯
¯¯ ¯ ¯ ¯

¯b' ¯
1  1  1  1  0  0  0  1  b₃    0

3  = ¯
¯¯ ¯+ ¯ ¯.          (5.2)

¯b' ¯
¯1 1 1 1 1 0 0 0¯¯b4 ¯
¯0¯
¯⁴ ¯ ¯             ¯¯ ¯ ¯ ¯

¯b' ¯
¯b' ¯
¯0 1 1 1 1 1 0 0¯¯b5 ¯
¯0 0 1 1 1 1 1 0¯¯b6 ¯
¯1¯
¯1¯
¯⁶ ¯ ¯             ¯¯ ¯ ¯ ¯

'
¯7 ¯
¯0 0 0 1 1 1 1 1¯¯b7 ¯
¯0¯
Figure 6 illustrates the effect of the SubBytes()transformation on the State.



s0,0
s1,0

s0,1

s

s0,2
s1,2
s0,3 s1,3

S-Box


'
0,0

'
1,0


'
0,1

'
s '


'
0,2

'
1,2


'
0,3

'
1,3

r ,c
s  s  s  s
r,c
s'   s'   s'   s'

2,0  2,1  2,2  2,3

s  s  s  s
2,0  2,1

s'  s'
2,2

s'
2,3

s'

3,0
3,1
3,2
3,3
3,0
3,1
3,2
3,3

Figure 6. SubBytes() applies the S-box to each byte of the State.

The S-box used in the SubBytes()transformation is presented in hexadecimal form in Fig. 7.
For example, if s₁,1 ={53}, then the substitution value would be determined by the intersection of 
the row with index ‘5’ and the column with index ‘3’ in Fig. 7. This would result in s ₁¢,1 having 
a value of {ed}.
y
0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
0 63 7c 77 7b f2 6b 6f  c5 30 01 67 2b fe  d7 ab 76 1 ca 82 c9 7d fa 59 47  f0 ad d4 a2 af 9c  a4 
72 c0 2 b7 fd 93 26 36 3f f7  cc 34 a5 e5 f1 71  d8 31 15
3 04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75
4 09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84
5 53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf
6 d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8
x 7 51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2
8 cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73
9 60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db
a e0 32 3a 0a 49 06 24  5c c2 d3 ac 62 91  95 e4 79 b e7 c8 37 6d 8d d5 4e  a9 6c 56 f4 ea 65  7a 
ae 08 c ba 78 25 2e 1c a6 b4  c6 e8 dd 74 1f 4b  bd 8b 8a d 70 3e b5 66 48 03 f6  0e 61 35 57 b9 86 
 c1 1d 9e
e e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df
f 8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16
Figure 7. S-box: substitution values for the byte xy (in hexadecimal format).

16



5.1.2 Sh1:EtRows ( ) Transformation
In the ShififiRows ( ) transformation, the bytes in the last three rows of the State are cyclically 
shifted over different numbers of bytes (offsets). The first row, r — 0, is not shifted.
Specifically, the Shi £LRows ( ) transformation proceeds as follows:

’r,c  Mr,(c+sñi(/(r,Nb))i..d Nb for 0 < r < 4  and  0 ñ c < Nb,         (5.3)
where the shift value shift(r,Nb) depends on the row number, r, as follows (recall that Nb — 4): 
Chief(1,4) * 1 ; Sh I(2,4) * 2 ; Chief(3,4) = 3 .           (5.4)
This has the effect of moving bytes to “lower” positions in the row (i.e., lower values of c in a 
given row), while the “lowest” bytes wrap around into the “top” of the row (i.e., higher values of 
c in a given row).
Figure 8 illustrates the Shi:ffiRows ( ) transformation.

ShiftRows()



Sr,0
r,l
S ,2
r,3


S                      S


0,0
0,1
0,2
0,3
0,0
0,1
0,2
0,3


1,0
1,1
1,2
1,3
1,2
1,3
S ,0



2, 0
52,1
52, 2

2,3

2, 2
52,3

2, 0
52,1



Figure 8. Sh1CtRows ( ) cyclically shifts the last three rows in the State.


5.4 .3  MixColumns ( ) Transformation
The MixColumns ( ) transformation operates on the State column-by-column, treating each column as a 
four-term polynomial  as described in Sec. 4.3.  The columns are considered as polynomials over 
GF(2⁸) and multiplied modulo x⁴ + 1 with a fixed polynomial a(x), given by
a(x) — (0 3}x³ + (01}x' + (01}x + (0 2 }             (5.5)
As described in Sec. 4.3, this can be written as a matrix multiplication. Let
*'(*)' °(*) *(*)




17




D₀ O  B2  03  01  01O G₀
1 02 03 01s
&1  01 02  03 Dz,


for 0 ñ c < Nb.            (5.6)
% 2,c
g„g &3  01 01 02

As a result of this multiplication, the four bytes in a column are replaced by the following:




s2  = st  O s, O ( ( 0 2 } • s2 )  ((0 3} • s  )
= (03}• sx)I  D y,O((021’ ’3)’

Figure 9 illustrates the MixColumns ( ) transformation.

i'fixCo1umns ( )


0
0 0    0 2

-0,3
30’0  0,c  0,2

0,3

Al,0   ’^ J1,2  S1,3





3,0  3,c *3,2

3,3
S3’  5'3,c

3,3

Figure 9. M1xColumns () operates on the State column-by-column.

5.1.4 AddRoundAey () Transformation
In the AddRoun‹:1Key ( ) transformation, a Round Key is added to the State by a simple bitwise XOR 
operation. Each Round Key consists of Nb words from the key schedule (described in Sec. 5.2). Those 
Nb words are each added into the columns of the State, such that


where [w;] are the key schedule words described in Sec. 5.2, and round is a value in the range 0 ñ 
round ñ Mr. In the Cipher, the initial Round Key addition occurs when round — 0, prior to the first 
application of the round function (see Fig. 5). The application of the AddRoundltey ( ) 
transformation to the Nr rounds of the Cipher occurs when 1 ñ round ñ Nr.
The action of this transformation is illustrated in Fig. 10, where / = round * Nb.  The byte 
address within words of the key schedule was described in Sec. 3.1.



18

















Figure 10. AddRoundXey ( ) XORs each column of the State with a word
from the key schedule.

5.2  Key Expansion
The AES algorithm takes the Cipher Key, A, and performs a Key Expansion routine to generate a key 
schedule. The Key Expansion generates a total of Nb (Nr + l) words: the algorithm requires an 
initial set of lb  words, and each of the Nr rounds requires Nb words of key data.  The resulting 
key schedule consists of a linear array of 4-byte words, denoted [w, ], with i in the range 0 ñ i < 
Nb(Nr + 1).
The expansion of the input key into the key schedule proceeds according to the pseudo code in Fig. 
11.
SuhWord ( ) is a function that takes a four-byte input word and applies the S-box (Sec. 5.1.1, Fig. 
7) to each of the four bytes to produce an output word. The function RofiWord ( ) takes a word 
[ao,al,a2,a3]as input, performs a cyclic permutation, and returns the word [ 1, 2, 3,  ] The round 
constant word array, Rcon [i] , contains the values given by [x' ’,{0 0 },{0 0},{0 0}], with x ⁱ ¹ 
being powers of x (x is denoted as {0 2 }) in the field GF(2⁸), as discussed in Sec. 4.2 (note that 
i starts at 1, not 0).
From Fig. 11, it can be seen that the first Nk words of the expanded key are filled with the Cipher 
Key. Every following word, w[i], is equal to the XOR of the previous word, w[i-1], and the word NO 
positions earlier, w[i —NO]. For words in positions that are a multiple of NO, a transformation is 
applied to w[i—1] prior to the XOR, followed by an XOR with a round constant, Rcon [i] . This 
transformation consists of a cyclic shift of the bytes in a word (RofiWord ( ) ), followed by the 
application of a table lookup to all four bytes of the word (SubWord ( ) ).
It is important to note that the Key Expansion routine for 256-bit Cipher Keys (Nk — 8) is slightly 
different than for 128- and 192-bit Cipher Keys.  If Nk — 8 and i — 4 is a multiple of Nk, then 
SubWord ( ) is applied to w[i -1] prior to the XOR .




19





KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk) begin
word temp i = 0
while (i < Nk)
w[i] = word(key[4*i], key[4*i+1], key[4*it2], key[4*i+3]) i = it1
end while i = Nk
while (i < Nb * (Nr+1)] temp = w[i-1]
if (i mod Nk = 0)
temp = SubWord(RotWord(temp)) xor Rcon[i/Nk] else if (Nk > 6 and i mod Nk = 4)
temp = SubWord(temp) end if
w[i] = w[i-Nk] xor temp i = i + 1
end while end

Note that Nk=4, 6, and 8 do not all have to be implemented; they are all included in the 
conditional statement above for conciseness.  Specific implementation requirements for the Cipher 
Key are presented in Sec. 6.1.

Figure 11. Pseudo Code for Key Expansion.²

Appendix A presents examples of the Key Expansion.

5.3  Inverse Cipher
The Cipher transformations in Sec. 5.1 can be inverted and then implemented in reverse order to 
produce a straightforward Inverse Cipher for the AES algorithm. The individual transformations used 
in the Inverse Cipher - InvShi£CRows ( } , InvSubByfies ( ) ,I nvMixColumns ( ) , and AddRoundKey ( 
) — process the State and are described in the following subsections.
The Inverse Cipher is described in the pseudo code in Fig. 12. In Fig. 12, the array  [ l contains 
the key schedule, which was described previously in Sec. 5.2.




² The functions SubWord ( ) and Rofjord () return a result that is a transformation of the function 
input, whereas the transformations in the Cipher and Inverse Cipher (e.g., Shi f0Rows ( ) , 
SubByfies ( ) , etc.) transform the State array that is addressed by the ‘ s L at e’ pointer.

20





InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)]) begin
byte state[4,Nb]

state = in
AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1]) // See Sec. 5.1.4 for round = Nr-1 step -1 downto 1
InvShiftRows(state)        // See Sec. 5.3.1
InvSubBytes(state)        // See Sec. 5.3.2 AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
InvMixColumns(state)        // See Sec. 5.3.3
end for

InvShiftRows(state) InvSubBytes(state) AddRoundKey(state, w[0, Nb-1])

out = state
end

Figure 12. Pseudo Code for the Inverse Cipher.'

5.3.1 InvSh1:EtRows () Transformation
InvShi £fiRows ( ) is the inverse of the Shi £fiRows ( ) transformation. The bytes in the last 
three rows of the State are cyclically shifted over different numbers of bytes (offsets). The first 
row, r — 0, is not shifted.  The bottom three rows are cyclically shifted by Nb - shift(r, Nb) 
bytes, where the shift value shift(r,Nb) depends on the row number, and is given in equation (5.4) 
(see Sec. 5.1.2).
Specifically, the I nvshi £fiRows ( ) transformation proceeds as follows:

Sr (c*sñi//(r,Nb))m.d.b - sr,‹ for 0 < r  4  and  0 S c < Nb
Figure 13 illustrates the I nvshi f fiRows ( ) transformation.
(5.8)











The various transformations (e.g., I nvSubByfies ( ) , I nvshi ffiRows ( ) , etc.) act upon the 
State array that is addressed by the ‘ s L at e’ pointer. AddRoundKey ( ) uses an additional 
pointer to address the Round Key.

21




InvShiftRows()


s ,r0
s ,1r
s ,r2
s ,r3

'
,r0

'
,1r

'
,r2

'
,r3

S                      S ’


s0,0 s1,0 s2,0 s3,0
s0,1 s1,1 s2,1 s3,1
s0,2
s1,2
s2,2
s3,2
s0,3 s1,3 s2,3 s3,3
s0,0 s1,3 s2,2 s3,1
s0,1 s1,0 s2,3 s3,2
s0,2 s1,1 s2,0 s3,3
s0,3 s1,2 s2,1 s3,0
Figure 13. InvShiftRows()cyclically shifts the last three rows in the State.

5.3.2 InvSubBytes() Transformation
InvSubBytes() is the inverse of the byte substitution transformation, in which the inverse S- box 
is applied to each byte of the State. This is obtained by applying the inverse of the affine 
transformation (5.1) followed by taking the multiplicative inverse in GF(2⁸).
The inverse S-box used in the InvSubBytes()transformation is presented in Fig. 14:
y
0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
0 52 09 6a d5 30 36 a5 38 bf 40 a3 9e 81 f3 d7 fb
1 7c e3 39 82 9b 2f ff 87 34 8e 43 44 c4 de e9 cb
2 54 7b 94 32 a6 c2 23 3d ee 4c 95 0b 42 fa c3 4e
3 08 2e a1 66 28 d9 24 b2 76 5b a2 49 6d 8b d1 25
4 72 f8 f6 64 86 68 98 16 d4 a4 5c cc 5d 65 b6 92
5 6c 70 48 50 fd ed b9 da 5e 15 46 57 a7 8d 9d 84
6 90 d8 ab 00 8c bc d3 0a f7 e4 58 05 b8 b3 45 06

x 7 d0
8 3a
9 96
a 47
b fc
c 1f
d 60
e a0
f 17
2c 1e 8f
91 11 41
ac 74 22
f1 1a 71
56 3e 4b
dd a8 33
51 7f a9
e0 3b 4d
2b 04 7e
ca 3f
4f 67
e7 ad
1d 29
c6 d2
88 07
19 b5
ae 2a
ba 77
0f 02 c1
dc ea 97
35 85 e2
c5 89 6f
79 20 9a
c7 31 b1
4a 0d 2d
f5 b0 c8
d6 26 e1
af bd
f2 cf
f9 37
b7 62
db c0
12 10
e5 7a
eb bb
69 14
03 01
ce f0
e8 1c
0e aa
fe 78
59 27
9f 93
3c 83
63 55
13 8a 6b
b4 e6 73
75 df 6e
18 be 1b
cd 5a f4
80 ec 5f
c9 9c ef
53 99 61
21 0c 7d
Figure 14. Inverse S-box: substitution values for the byte xy (in hexadecimal format).





22



5.3.3 InvM1xCo1umns () Transformation
InvMixColumns ( )   is  the  inverse   of  the  MixColumns ( )   transformation. InvMixColumns ( ) 
operates on the State column-by-column, treating each column as a four- term polynomial  as 
described in Sec. 4.3.  The columns are considered as polynomials over GF(2⁸) and multiplied modulo 
x⁴ + 1 with a fixed polynomial a (x), given by

a ¹(x) = (0b} ' + {0 d}x + {0 9}x + (0 e}.
As described in Sec. 4.3, this can be written as a matrix multiplication. Let
'(*)'  a ' ( )  *(*)
(5.9)


D0 0


%t2,c
be  0b  0d  09

id  09  0e  0b O Do
b 0d  09  Oeyy„y


for 0 ñ c < Nb.


(5.10)

As a result of this multiplication, the four bytes in a column are replaced by the following: so  = 
((0 e} • so )  ((0 b} • si ) O ((0 d} • s2 ) 0 ((0 9} • s  )
s, - ({0 9} • S .)  ^ ({0 e} • s, ) O ({ 0 b} • S₂ )  ({0 d} • s„3 )
s₂  = ({0 d} • so.)  ° ((0  9} • s, ) O ({0 e} • s₂ ) O ({0 b} • s  )
s  = ((0 b} • so )  ((0 d} • s, )  ((0 9} • s, ) O ((0 e} • s  )

5.3.4 Inverse of the AddRoundAey () Transformation
Ad‹:lRounclKey ( ) , which was described in Sec. 5.1.4, is its own inverse, since it only involves 
an application of the XOR operation.

5.3.5 Equivalent Inverse Cipher
In the straightforward Inverse Cipher presented in Sec. 5.3 and Fig. 12, the sequence of the 
transformations differs from that of the Cipher, while the form of the key schedules for encryption 
and decryption remains the same. However, several properties of the AES algorithm allow for an 
Equivalent Inverse Cipher that has the same sequence of transformations as the Cipher (with the 
transformations replaced by their inverses). This is accomplished with a change in the key 
schedule.
The two properties that allow for this Equivalent Inverse Cipher are as follows:


1.  The  SubByfies ()  and  Shi£fiRows ( )  transformations  commute;  that  is,  a SuhByfies (}  
transformation  immediately  followed  by  a  ShiffiRows () transformation  is  equivalent  to  a  
Shi £fiRows ( )  transformation  immediately followed buy a SubByfies ( ) transformation.  The same 
is true for their inverses, InvSubByfies ( ) and InvShi £fiRows .

23



2.  The column mixing operations - MixColumns ( ) and InvMixColumns ( ) - are linear with respect 
to the column input, which means
InvMixColumns(state XOR Round Key) =
InvMixColumns(state) XOR InvMixColumns(Round Key).


These  properties  allow  the  order  of  InvSuhByLes()   and  InvShifLRows() transformations to be 
reversed. The order of the AddRoundKey ( ) and I nvMixColumns ( ) transformations can also be 
reversed, provided that the columns (words) of the decryption key schedule are modified using the I 
nvMixColumns ( ) transformation.
The equivalent inverse cipher is defined by reversing the order of the I nvSubByLes ( ) and 
InvShi£fiRows ( )  transformations shown in Fig. 12, and by reversing the order of the 
AddRoun‹:lKey ( ) and InvMixColumns ( ) transformations used in the “round loop” after first  
modifying  the  decryption  key  schedule  for  round  —  1  to  Nr-1  using  the InvMixColumns ( ) 
 transformation. The first and last Nb words of the decryption key schedule shall not be modified 
in this manner.
Given these changes, the resulting Equivalent Inverse Cipher offers a more efficient structure than 
the Inverse Cipher described in Sec. 5.3 and Fig. 12.  Pseudo code for the Equivalent Inverse 
Cipher appears in Fig. 15. (The word array dw [ ] contains the modified decryption key schedule. 
The modification to the Key Expansion routine is also provided in Fig. 15.)


























24





EqInvCipher(byte in[4*Nb], byte out[4*Nb], word dw[Nb*(Nr+1)]) begin
byte state[4,Nb] state = in
AddRoundKey(state, dw[Nr*Nb, (Nr+1)*Nb-1])

for round = Nr-1 step -1 downto 1 InvSubBytes(state) InvShiftRows(state) InvMixColumns(state)
AddRoundKey(state, dw[round*Nb, (round+1)*Nb-1]) end for

InvSubBytes(state) InvShiftRows(state) AddRoundKey(state, dw[0, Nb-1])

out = state
end


For the Equivalent Inverse Cipher, the following pseudo code is added at the end of the Key 
Expansion routine (Sec. 5.2):
for i = 0 step 1 to (Nrt1)*Nb-1 dw[i] = w[i]
end for


for round = 1 step 1 to Nr-1 InvMixColumns(dw[round*Nb, (round+1)*Nb-1])

// note change of
type
end for

Note that, since InvMixColumns operates on a two—dimensional array of bytes while the Round Keys 
are held in an array of words, the call to InvMixColumns in this code sequence involves a change of 
type (i.e. the input to InvMixColumns() is normally the State array, which is considered to be a 
two-dimensional array of bytes, whereas the input here is a Round Key computed as a one-dimensional 
array of words).

Figure 15. Pseudo Code for the Equivalent Inverse Cipher.


6.  Implementation Issues

6.1  Key Length Requirements
An implementation of the AES algorithm shall support at least one of the three key lengths 
specified in Sec. 5: 128, 192, or 256 bits (i.e., Ok — 4, 6, or 8, respectively). Implementations

25



may optionally support two or three key lengths, which may promote the interoperability of 
algorithm implementations.

6.2  Keying Restrictions
No weak or semi-weak keys have been identified for the AES algorithm, and there is no restriction 
on key selection.

6.3  Parameterization of Key Length, Block Size, and Round Number
This standard explicitly defines the allowed values for the key length (Nk), block size (Nb), and 
number of rounds (Nr) — see Fig. 4.  However, future reaffirmations of this standard could include 
changes  or additions  to the allowed  values for those parameters.  Therefore, implementers may 
choose to design their AES implementations with future flexibility in mind.

6.4  Implementation Suggestions Regarding Various Platforms
Implementation variations are possible that may, in many cases, offer performance or other 
advantages. Given the same input key and data (plaintext or ciphertext), any implementation that 
produces the same output (ciphertext or plaintext) as the algorithm specified in this standard is 
an acceptable implementation of the AES.
Reference [3] and other papers located at Ref. [1] include suggestions on how to efficiently 
implement the AES algorithm on a variety of platforms.
























26




Appendix A - Key Expansion Examples
This appendix shows the development of the key schedule for various key sizes. Note that multi- 
byte values are presented using the notation described in Sec. 3. The intermediate values produced 
during the development of the key schedule (see Sec. 5.2) are given in the following table (all 
values are in hexadecimal format, with the exception of the index column (i)).

A.1  Expansion of a 128-bit Cipher Key
This section contains the key expansion of the following cipher key:
Cipher Key = 2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c
for NO = 4, which results in

*o' 2b7e1516
w ' 28aed2a6

*2' abf7l588

*3 — 09cf4f3c



i
(dec)


temp

After
RotWord()

After  Rcon[i/Nk]

After XOR
with Rcon


[i-Nk]

w[i]= temp XOR w[i-Nk]

4 09cf4f3c
5 a0fafe17
6 88542cb1
7 23a33939
8 2a6c7605
9 f2c295f2
10 7a96b943
11 5935807a
12 7359f67f
13 3d80477d
14 47l6fe3e
15 1e237e44
16 6d7a883b
17 ef44a541
18 a8525b7f
19 b671253b
20 db0bad00
21 d4d1c6f8
22 7c839d87
23 caf2b8bc
cf4f3c09




6c76052a




59f67f73




7a883b6d




0bad00db
8a84eb01




50386be5




cb42d28f




dac4e23c




2b9563b9
01000000




02000000




04000000




08000000




10000000
8b84eb0l




52386be5




cf42d28f




d2c4e23c




3b9563b9
2b7e15l6 28aed2a6 abf71588 09cf4f3c a0fafel7 88542cbl 23a33939
2a6c7605
f2c295f2 7a96b943
5935807a
7359f67f
3d80477d
4716fe3e 1e237e44
6d7a883b ef44a54l a8525b7f b671253b
db0bad00
a0fafe17 88542cbl 23a33939
2a6c7605
f2c295f2 7a96b943
5935807a
7359f67f
3d80477d
4716fe3e 1e237e44
6d7a883b ef44a541 a8525b7f b671253b
db0bad00 d4d1c6f8 7c839d87
caf2b8bc 11f915bc


27




24 11f915bc
25 6d88a37a
26 ll0b3efd
27 dbf9864l
28 ca0093fd
29 4e54f70e
30 5f5fc9f3
31 84a64fb2
32 4ea6dc4f
33 ead27321
34 b58dbad2
35 312bf560
36 7f8d292f
37 ac7766f3
38 19fadc21
39 28d12941
40 575c006e
41 d014f9a8
42 c9ee2589
43 el3f0cc8
f915bc11




0093fdca




a6dc4f4e




8d292f7f




5c006e57
99596582




63dc5474




2486842f




5da5l5d2




4a639f5b
20000000




40000000




80000000




1b000000




36000000
b9596582




23dc5474




a486842f




46a515d2




7c639f5b
d4d1c6f8 7c839d87
caf2b8bc 11f915bc 6d88a37a 110b3efd dbf98641 ca0093fd 4e54f70e 5f5fc9f3 84a64fb2 4ea6dc4f ead2732l 
b58dbad2 312bf560
7f8d292f ac7766f3 l9fadc2l 28d12941
575c006e
6d88a37a ll0b3efd dbf9864l ca0093fd 4e54f70e 5f5fc9f3 84a64fb2 4ea6dc4f ead2732l b58dbad2 312bf560
7f8d292f ac7766f3 l9fadc21 28d12941
575c006e
d014f9a8 c9ee2589 el3f0cc8 b6630ca6


A.2  Expansion of a 192-bit Cipher Key
This section contains the key expansion of the following cipher key:
Cipher Key =   8e 73 b0 f7 da 0e 64 52 c8 10 f3 2b
80 90 79 e5 62 f8 ea d2 52 2c 6b 7b

for Nk — 6, which results in
*o' 8e73b0f7 4' 62f8ead2


W ' da0e6452
*5—522c6b7b


W =c810f32b


*5' 809079e5



i
(dec)

6
7
g

temp

522c6b7b fe0c91f7 2402f5a5

After
RoeRord ( )

2c6b7b52

After
SubWord ( )

717f2100

Rcon[i/Nk] 01000000

After XOR
with Rcon

707f2100

[i-Nk]

8e73b0f7 da0e6452 c8l0f32b
w[i]= temp XOR w[i-Nk]
fe0c91f7 2402f5a5
ec12068e

28




9 ec12068e
10 6c827f6b
11 0e7a95b9
12 5c56fec2
13 4db7b4bd
14 69b54118
15 85a74796
16 e92538fd
17 e75fad44
18 bb095386
19 485af057
20 21efb14f
21 a448f6d9
22 4d6dce24
23 aa326360
24 113b30e6
25 a25e7ed5
26 83b1cf9a 27 27f93943 28 6a94f767
29 c0a69407
30 d19da4el
31 ecl786eb
32 6fa64971
33 485f7032
34 22cb8755
35 e26d1352
36 33f0b7b3
37 40beeb28 38 2f18a259
39 6747d26b
40 458c553e
41 a7el466c
42 9411f1df
43 821f750a




56fec25c







095386bb







3b30e611







9da4eldl







f0b7b333







11f1df94




b1bb254a







0led44ea







e2048e82







5e49f83e







8ca96dc3







82a19e22




02000000







04000000







08000000







10000000







20000000







40000000




b3bb254a







05ed44ea







ea048e82







4e49f83e







aca96dc3







c2al9e22
809079e5
62f8ead2 522c6b7b fe0c9lf7 2402f5a5
ecl2068e 6c827f6b 0e7a95b9 5c56fec2 4db7b4bd 69b54118
85a74796
e92538fd e75fad44 bb095386 485af057
2lefbl4f a448f6d9 4d6dce24 aa326360 113b30e6
a25e7ed5 83b1cf9a 27f93943
6a94f767 c0a69407
dl9da4el ec1786eb 6fa64971
485f7032
22cb8755 e26d1352
33f0b7b3 40beeb28 2fl8a259
6c827f6b 0e7a95b9 5c56fec2 4db7b4bd 69b54118
85a74796
e92538fd e75fad44 bb095386 485af057
21efb14f a448f6d9 4d6dce24 aa326360 113b30e6
a25e7ed5 83blcf9a 27f93943
6a94f767 c0a69407
dl9da4el ec1786eb 6fa64971
485f7032
22cb8755 e26d1352
33f0b7b3 40beeb28 2f18a259
6747d26b
458c553e
a7e1466c 9411f1df 821f750a
ad07d753


29




44 ad07d753
45 ca400538
46 8fcc5006
47 282dl66a
48 bc3ce7b5
49 e98ba06f
50 448c773c
51 8ecc7204






3ce7b5bc






eb94d565






80000000






6b94d565
6747d26b
458c553e
a7e1466c 94llfldf 821f750a
ad07d753 ca400538
8fcc5006
ca400538
8fcc5006 282dl66a bc3ce7b5 e98ba06f 448c773c
8ecc7204 01002202


A.3  Expansion of a 256-bit Cipher Key
This section contains the key expansion of the following cipher key:
Cipher Key =   60 3d eb 10 15 ca 71 be 2b 73 ae f0 85 7d 77 81
1f 35 2c 07 3b 61 08 d7 2d 98 10 a3 09 14 df f4

for Nk — 8, which results in
*o' 603deb10 4— 1f352c07


W ' l5ca71be
*5—3b6108d7


*2' 2b73aef0 6' 2d9810a3


*5 — 857d7781
*7— 0914dff4



i
(dec)

8
9
10
11
12
13
14
15
16
17
18
19
20
21
22

temp

0914dff4 9ba35411
8e6925af a51a8b5f 2067fcde a8b09cla 93dl94cd be49846e b75d5b9a d59aecb8 5bf3c9l7 fee94248 de8ebe96 
b5a9328a 2678a647

After RotWord ( )

14dff409










5d5b9ab7

After SubWord ( )

fa9ebf01




b785b01d




4c39b8a9




1d19ae90

Rcon[i/Nk] 01000000









02000000

After XOR
with Rcon

fb9ebf01










4e39b8a9

[i-Nk]

603debl0 15ca7lbe 2b73aef0 857d7781
1f352c07
3b6108d7
2d9810a3
09l4dff4 9ba35411
8e6925af a51a8b5f 2067fcde a8b09c1a 93d194cd be49846e
w[i]= temp XOR w[i-Nk]
9ba35411
8e6925af a51a8b5f 2067fcde a8b09c1a 93dl94cd be49846e b75d5b9a d59aecb8 5bf3c917 fee94248 de8ebe96 
b5a9328a 2678a647
98312229

30




23 98312229
24 2f6c79b3
25 812c81ad
26 dadf48ba
27 24360af2
28 fab8b464
29 98c5bfc9
30 bebd198e
31 268c3ba7
32 09e04214
33 68007bac
34 b2df33l6 35 96e939e4
36 6c518d80
37 c814e204
38 76a9fb8a
39 5025c02d
40 59c58239
41 de136967
42 6ccc5a7l
43 fa256395
44 9674ee15
45 5886ca5d
46 2e2f31d7
47 7e0aflfa 48 27cf73c3
49 749c47ab
50 18501dda
51 e2757e4f
52 7401905a
S3 cafaaae3
54 e4d59b34
55 9adf6ace
56 bd10190d
57 fe4890d1

6c79b32f










e0421409










c5823959










cf73c327










10190dbd

50b66dl5




2d6c8d43




el2cfa01




50d15dcd




a6l312cb




90922859




8a8f2ecc




927c60be




cad4d77a

04000000










08000000










10000000










20000000










40000000

54b66d15










e92cfa01










b61312cb










aa8f2ecc










8ad4d77a
b75d5b9a d59aecb8 5bf3c9l7 fee94248 de8ebe96 b5a9328a 2678a647
98312229
2f6c79b3 812c81ad dadf48ba 24360af2
fab8b464 98c5bfc9 bebdl98e 268c3ba7 09e04214
68007bac b2df33l6 96e939e4
6c518d80 c814e204
76a9fb8a 5025c02d
59c58239 de136967
6ccc5a7l fa256395 9674ee15
5886ca5d 2e2f3ld7 7e0aflfa 27cf73c3 749c47ab 18501dda
2f6c79b3 8l2c8lad dadf48ba 24360af2
fab8b464 98c5bfc9 bebdl98e 268c3ba7 09e04214
68007bac b2df3316 96e939e4
6c518d80 c814e204
76a9fb8a 5025c02d
59c58239 de136967
6ccc5a7l fa256395 9674ee15
5886ca5d 2e2f31d7 7e0af1fa 27cf73c3 749c47ab 18501dda e2757e4f 7401905a
cafaaae3 e4d59b34 9adf6ace bd10190d fe4890dl e6188d0b


31




58 e6188d0b
59 046df344
e2757e4f 7401905a
046df344
706c631e





















































32




Appendix B – Cipher Example
The following diagram shows the values in the State array as the Cipher progresses for a block 
length and a Cipher Key length of 16 bytes each (i.e., Nb = 4 and Nk = 4).
Input =   32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 07 34
Cipher Key = 2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c
The Round Key values are taken from the Key Expansion example in Appendix A.
Round  Start of    After     After     After    Round Key Number  Round    SubBytes   ShiftRows   
MixColumns    Value




input
32 88 31 e0
43 5a 31 37
f6 30 98 07
a8 8d a2 34
2b 28 ab 09
7e ae f7 cf
¯        =
15 d2 15 4f
16 a6 88 3c


19 a0 9a e9 3d f4 c6 f8
1
e3 e2 8d 48
be 2b 2a 08

d4 e0 b8 1e
27 bf b4 41 11 98 5d 52 ae f1 e5 30

d4 e0 b8 1e bf b4 41 27
5d 52 11 98
30 ae f1 e5

04 e0 48 28
66 cb f8 06
¯
81 19 d3 26
e5 9a 7a 4c

a0 88 23 2a
fa 54 a3 6c
=
fe 2c 39 76
17 b1 39 05


a4 68 6b 02
9c 9f 5b 6a
2
7f 35 ea 50
f2 2b 43 49
49 45 7f 77
de db 39 02
d2 96 87 53
89 f1 1a 3b
49 45 7f 77
db 39 02 de
87 53 d2 96
3b 89 f1 1a
58 1b db 1b
4d 4b e7 6b
¯
ca 5a ca b0
f1 ac a8 e5
f2 7a 59 73
c2 96 35 59
=
95 b9 80 f6
f2 43 7a 7f



aa 61 82 68
8f dd d2 32
3
5f e3 4a 46
03 ef d2 9a

ac ef 13 45
73 c1 b5 23
cf 11 d6 5a 7b df b5 b8

ac ef 13 45
c1 b5 23 73
d6 5a cf 11 b8 7b df b5

75 20 53 bb
ec 0b c0 25
¯
09 63 cf d0
93 33 7c dc
3d 47 1e 6d 80 16 23 7a
=
47 fe 7e 88
7d 3e 44 3b


48 67 4d d6
6c 1d e3 5f
4
4e 9d b1 58 ee 0d 38 e7
52 85 e3 f6
50 a4 11 cf 2f 5e c8 6a 28 d7 07 94
52 85 e3 f6
a4 11 cf 50 c8 6a 2f 5e 94 28 d7 07
0f 60 6f 5e
d6 31 c0 b3
¯
da 38 10 13
a9 bf 6b 01
ef a8 b6 db
44 52 71 0b
=
a5 5b 25 ad 41 7f 3b 00


e0 c8 d9 85
92 63 b1 b8
5
7f 63 35 be
e8 c0 50 01
e1 e8 35 97
4f fb c8 6c d2 fb 96 ae 9b ba 53 7c
e1 e8 35 97
fb c8 6c 4f
96 ae d2 fb 7c 9b ba 53
25 bd b6 4c
d1 11 3a 4c
¯
a9 d1 33 c0
ad 68 8e b0
d4 7c ca 11
d1 83 f2 f9
=
c6 9d b8 15
f8 87 bc bc



33





f1 c1 7c 5d
00 92 c8 b5
6
6f 4c 8b d5
55 ef 32 0c
a1 78 10 4c
63 4f e8 d5 a8 29 3d 03 fc df 23 fe
a1 78 10 4c
4f e8 d5 63 3d 03 a8 29
fe fc df 23
4b 2c 33 37
86 4a 9d d2
¯
8d 89 f4 18
6d 80 e8 d8
6d 11 db ca
88 0b f9 00
=
a3 3e 86 93
7a fd 41 fd


26 3d e8 fd
0e 41 64 d2
7
2e b7 72 8b
17 7d a9 25
f7 27 9b 54
ab 83 43 b5
31 a9 40 3d
f0 ff d3 3f
f7 27 9b 54
83 43 b5 ab 40 3d 31 a9 3f f0 ff d3
14 46 27 34
15 16 46 2a
¯
b5 15 56 d8
bf ec d7 43
4e 5f 84 4e
54 5f a6 a6
=
f7 c9 4f dc
0e f3 b2 4f


5a 19 a3 7a
41 49 e0 8c
8
42 dc 19 04
b1 1f 65 0c
be d4 0a da 83 3b e1 64
2c 86 d4 f2 c8 c0 4d fe
be d4 0a da 3b e1 64 83
d4 f2 2c 86 fe c8 c0 4d
00 b1 54 fa
51 c8 76 1b
¯
2f 89 6d 99
d1 ff cd ea
ea b5 31 7f
d2 8d 2b 8d
=
73 ba f5 29 21 d2 60 2f


ea 04 65 85
83 45 5d 96
9
5c 33 98 b0
f0 2d ad c5
87 f2 4d 97
ec 6e 4c 90 4a c3 46 e7 8c d8 95 a6
87 f2 4d 97
6e 4c 90 ec
46 e7 4a c3 a6 8c d8 95
47 40 a3 4c
37 d4 70 9f
¯
94 e4 3a 42
ed a5 a6 bc
ac 19 28 57
77 fa d1 5c
=
66 dc 29 00
f3 21 41 6e


eb 59 8b 1b
40 2e a1 c3
10
f2 38 13 42
1e 84 e7 d2
e9 cb 3d af 09 31 32 2e
89 07 7d 2c
72 5f 94 b5
e9 cb 3d af 31 32 2e 09
7d 2c 89 07
b5 72 5f 94
d0 c9 e1 b6
14 ee 3f 63
¯        =
f9 25 0c 0c
a8 89 c8 a6





output

39 02 dc 19
25 dc 11 6a 84 09 85 0b 1d fb 97 32
















34




Appendix C — Example Vectors
This appendix contains example vectors, including intermediate values — for all three AES key 
lengths (Nk — 4, 6, and 8), for the Cipher, Inverse Cipher, and Equivalent Inverse Cipher that are 
described in Sec. 5.1, 5.3, and 5.3.5, respectively. Additional examples may be found at [I] and 
[5].
All vectors are in hexadecimal notation, with each pair of characters giving a byte value in which 
the left character of each pair provides the bit pattern for the 4 bit group containing the higher 
numbered bits using the notation explained in Sec. 3.2, while the right character provides the bit 
pattern for the lower-numbered bits. The array index for all bytes (groups of two hexadecimal 
digits) within these test vectors starts at zero and increases from left to right.
Legend for CIPHER (ENCRYPT) (round number r = 0 to 10, 12 or 14): input:  cipher input
start:  state at start of round[r] s_box:  state after SubBytes() s_row:  state after ShiftRows() 
m_col:  state after MixColumns()
k_sch: key schedule value for round[r] output: cipher output

Legend for INVERSE CIPHER (DECRYPT) (round number r = 0 to 10, 12 or 14): iinput: inverse cipher 
input
istart: state at start of round[r] is_box: state after InvSubBytes() is_row: state after 
InvShiftRows() ik_sch: key schedule value for round[r] ik_add: state after AddRoundKey() ioutput: 
inverse cipher output

Legend for EQUIVALENT INVERSE CIPHER (DECRYPT) (round number r = 0 to 10, 12 or 14):

iinput: inverse cipher input istart: state at start of round[r] is_box: state after InvSubBytes() 
is_row: state after InvShiftRows() im_col: state after InvMixColumns()
ik_sch: key schedule value for round[r] ioutput: inverse cipher output


C.1 AES-128 (Ok——4, N  10)
PLAINTEXT:    001l2233445566778899aabbccddeeff KEY:      000102030405060708090a0b0c0d0e0f

CIPHER (ENCRYPT):

35




round[ O].input round[ O].k_sch round[ 1].start round[ 1].s_box round[ 1].s_row round[ 1].m_col 
round[ 1].k_sch round[ 2].start round[ 2].s_box round[ 2].s_row round[ 2].m_col round[ 2].k_sch 
round[ 3].start round[ 3].s_box round[ 3].s_row round[ 3].m_col round[ 3].k_sch round[ 4].start 
round[ 4].s_box round[ 4].s_row round[ 4].m_col round[ 4].k_sch round[ 5].start round[ 5].s_box 
round[ 5].s_row round[ 5].m_col round[ 5].k_sch round[ 6].start round[ 6].s_box round[ 6].s_row 
round[ 6].m_col round[ 6].k_sch round[ 7].start round[ 7].s_box round[ 7].s_row round[ 7].m_col 
round[ 7].k_sch round[ 8].start round[ 8].s_box round[ 8].s_row round[ 8].m_col round[ 8].k_sch 
round[ 9].start round[ 9].s_box round[ 9].s_row round[ 9].m_col round[ 9].k_sch round[10].start 
round[10].s_box round[10].s_row round[10].k_sch round[10].output
001l2233445566778899aabbccddeeff 000102030405060708090a0b0c0d0e0f
00102030405060708090a0b0c0d0e0f0
63cab7040953d051cd60e0e7ba70e18c 6353e08c0960el04cd70b75lbacad0e7 5f7264l557f5bc92f7be3b29ldb9f9la 
d6aa74fdd2af72fadaa678fld6ab76fe 89d8l0e8855ace682dl843d8cbl28fe4 a76lca9b97be8b45d8adla6llfc97369 
a7bela6997ad739bd8c9ca45lf6l8b6l ff87968431d86a51645151fa773ad009
b692cf0b643dbdflbe9bc5006830b3fe 4915598f55e5d7a0daca94falf0a63f7 3b59cb73fcd90ee05774222dc067fb68 
3bd92268fc74fb735767cbe0c0590e2d 4c9cle66f77lf0762c3f868e534df256 b6ff744ed2c2c9bf6c590cbf0469bf41 
fa636a2825b339c940668a3l57244dl7
2dfb02343f6d12dd09337ec75b36e3f0 2d6d7ef03f33e334093602dd5bfbl2c7 6385b79ffc538df997be478e7547d691 
47f7f7bc95353e03f96c32bcfd058dfd 247240236966b3fa6ed2753288425b6c
36400926f9336d2d9fb59d23c42c3950
36339d50f9b539269f2c092dc4406d23
f4bcd45432e554d075f1d6c5ldd03b3c 3caaa3e8a99f9deb50f3af57adf622aa c81677bc9b7ac93b25027992b0261996
e847f56514dadde23f77b64fe7f7d490 e8dab690l477d4653ff7f5e2e747dd4f 9816ee7400f87f556b2c049c8e5ad036 
5e390f7df7a69296a7553dc10aa3lf6b c62fe109f75eedc3cc79395d84f9cf5d b4l5f80l6858552e4bb6124c5f998a4c 
b458l24c68b68a014b99f82e5f15554c c57elcl59a9bd286f05f4be098c63439 l4f970lae35fe28c440adf4d4ea9c026 
dl876c0f79c4300ab45594add66ff4lf 3e175076b6lc04678dfc2295f6a8bfc0 3elc22c0b6fcbf768da85067f6l70495 
baa03de7a1f9b56ed5512cba5f4l4d23 47438735a4lc65b9e0l6baf4aebf7ad2 fde3bad205e5d0d73547964ef1fe37f1 
5411f4b56bd9700e96a0902falbb9aal 54d990al6ba09ab596bbf40ea11l702f e9f74eec023020f6lbf2ccf2353c21c7 
549932dlf0855768l093ed9cbe2c974e bd6e7c3df2b5779e0b612l6e8bl0b689 7a9fl02789d5f50b2beffd9f3dca4ea7 
7ad5fda789ef4e272bcal00b3d9ff59f l311ld7fe3944al7f307a78b4d2b30c5 69c4e0d86a7b0430d8cdb78070b4c55a

INVERSE CIPHER (DECRYPT) :
round[ O].iinput 69c4e0d86a7b0430d8cdb78070b4c55a round[ O].ik_sch l31lld7fe3944al7f307a78b4d2b30c5 
round[ 1].istart 7ad5fda789ef4e272bcal00b3d9ff59f

36




round[ 1].is_row round[ 1].is_box round[ 1].ik_sch round[ 1].ik_add round[ 2].istart round[ 
2].is_row round[ 2].is_box round[ 2].ik_sch round[ 2].ik_add round[ 3].istart round[ 3].is_row 
round[ 3].is_box round[ 3].ik_sch round[ 3].ik_add round[ 4].istart round[ 4].is_row round[ 
4].is_box round[ 4].ik_sch round[ 4].ik_add round[ 5].istart round[ 5].is_row round[ 5].is_box 
round[ 5].ik_sch round[ 5].ik_add round[ 6].istart round[ 6].is_row round[ 6].is_box round[ 
6].ik_sch round[ 6].ik_add round[ 7].istart round[ 7].is_row round[ 7].is_box round[ 7].ik_sch 
round[ 7].ik_add round[ 8].istart round[ 8].is_row round[ 8].is_box round[ 8].ik_sch round[ 
8].ik_add round[ 9].istart round[ 9].is_row round[ 9].is_box round[ 9].ik_sch round[ 9].ik_add 
round[10].istart round[10].is_row round[10].is_box round[10].ik_sch round[10].ioutput

EQUIVALENT INVERSE
round[ O].iinput round[ O].ik_sch round[ 1].istart round[ 1].is_box round[ 1].is_row round[ 
1].im_col
7a9fl02789d5f50b2beffd9f3dca4ea7 bd6e7c3df2b5779e0b612l6e8b10b689 549932dlf08557681093ed9cbe2c974e 
e9f74eec023020f61bf2ccf2353c21c7 54d990al6ba09ab596bbf40ea11l702f 541lf4b56bd9700e96a0902fa1bb9aal 
fde3bad205e5d0d73547964ef1fe37f1 47438735a4lc65b9e0l6baf4aebf7ad2 baa03de7a1f9b56ed5512cba5f4l4d23 
3e1c22c0b6fcbf768da85067f6170495 3e175076b6lc04678dfc2295f6a8bfc0 dl876c0f79c4300ab45594add66ff4lf 
l4f9701ae35fe28c440adf4d4ea9c026 c57elc159a9bd286f05f4be098c63439 b458l24c68b68a014b99f82e5f15554c 
b415f80l6858552e4bb6l24c5f998a4c c62fe109f75eedc3cc79395d84f9cf5d 5e390f7df7a69296a7553dcl0aa31f6b 
9816ee7400f87f556b2c049c8e5ad036 e8dab690l477d4653ff7f5e2e747dd4f e847f56514dadde23f77b64fe7f7d490 
c81677bc9b7ac93b25027992b0261996
3caaa3e8a99f9deb50f3af57adf622aa f4bcd45432e554d075f1d6c5ldd03b3c 36339d50f9b539269f2c092dc4406d23
36400926f9336d2d9fb59d23c42c3950
247240236966b3fa6ed2753288425b6c
47f7f7bc95353e03f96c32bcfd058dfd 6385b79ffc538df997be478e7547d691 2d6d7ef03f33e334093602dd5bfbl2c7 
2dfb02343f6d12dd09337ec75b36e3f0 fa636a2825b339c940668a3157244dl7
b6ff744ed2c2c9bf6c590cbf0469bf41 4c9cle66f77lf0762c3f868e534df256 3bd92268fc74fb735767cbe0c0590e2d 
3b59cb73fcd90ee05774222dc067fb68 4915598f55e5d7a0daca94falf0a63f7 b692cf0b643dbdf1be9bc5006830b3fe 
ff87968431d86a5164515lfa773ad009
a7bela6997ad739bd8c9ca45lf6l8b6l a76lca9b97be8b45d8adla6llfc97369 89d8l0e8855ace682dl843d8cb128fe4 
d6aa74fdd2af72fadaa678fld6ab76fe 5f72641557f5bc92f7be3b29ldb9f9la 6353e08c0960el04cd70b75lbacad0e7 
63cab7040953d051cd60e0e7ba70e18c 00102030405060708090a0b0c0d0e0f0
000l02030405060708090a0b0c0d0e0f
001l2233445566778899aabbccddeeff

CIPHER (DECRYPT):
69c4e0d86a7b0430d8cdb78070b4c55a l31lld7fe3944al7f307a78b4d2b30c5 7ad5fda789ef4e272bcal00b3d9ff59f 
bdb52189f261b63d0b107c9e8b6e776e bd6e7c3df2b5779e0b612l6e8b10b689 4773b91ff72f35436lcb0l8ea1e6cf2c

37



round[ 1].ik_sch  l3aa29be9c8faff6f770f58000f7bf03 round[ 2].istart  
54d990al6ba09ab596bbf40ea11l702f round[ 2].is_box  fde596fl054737d235febad7f1e3d04e round[ 
2].is_row  fde3bad205e5d0d73547964ef1fe37f1 round[ 2].im_col  2d7e86a339d9393ee6570a1l01904el6 
round[ 2].ik_sch  l362a4638f2586486bff5a76f7874a83 round[ 3].istart  
3e1c22c0b6fcbf768da85067f6170495 round[ 3].is_box  dlc4941f7955f40fb46f6c0ad68730ad round[ 
3].is_row  dl876c0f79c4300ab45594add66ff4lf round[ 3].im_col  39daee38f4fla82aaf432410c36d45b9 
round[ 3].ik_sch  8d82fc749c47222be4dadc3e9c7810f5 round[ 4].istart  
b458l24c68b68a014b99f82e5f15554c round[ 4].is_box  c65e395df779cf09ccf9elc3842fed5d round[ 
4].is_row  c62fe109f75eedc3cc79395d84f9cf5d round[ 4].im_col  9a39bf1d05b20a3a476a0bf79fe51184 
round[ 4].ik_sch  72e3098dl1c5de5f789dfe1578a2cccb round[ 5].istart  
e8dab6901477d4653ff7f5e2e747dd4f round[ 5].is_box  c87a79969b0219bc2526773bb0l6c992 round[ 
5].is_row  c81677bc9b7ac93b25027992b0261996 round[ 5].im_col  l8f78d779a93eef4f6742967c47f5ffd 
round[ 5].ik_sch  2ec4l0276326d7d26958204a003f32de round[ 6].istart  
36339d50f9b539269f2c092dc4406d23 round[ 6].is_box  2466756c69d25b236e4240fa8872b332 round[ 
6].is_row  247240236966b3fa6ed2753288425b6c round[ 6].im_col  85cf8bf472dl24c10348f545329c0053 
round[ 6].ik_sch  a8a2f5044de2c7f50a7ef79869671294 round[ 7].istart  
2d6d7ef03f33e334093602dd5bfb12c7 round[ 7].is_box  fab38al725664d2840246ac95763393l round[ 
7].is_row  fa636a2825b339c940668a3l57244dl7 round[ 7].im_col  fc1fclf9l934c98210fbfb8da340eb2l 
round[ 7].ik_sch  c7c6e39le54032f1479c306d6319e50c round[ 8].istart  
3bd92268fc74fb735767cbe0c0590e2d round[ 8].is_box  49e594f755ca638fda0a59a0lf15d7fa round[ 
8].is_row  4915598f55e5d7a0daca94falf0a63f7 round[ 8].im_col  0765l8f0b52ba2fb7a15c8d93be45e00 
round[ 8].ik_sch  a0db02992286dl60a2dc029c2485d56l round[ 9].istart  
a7bela6997ad739bd8c9ca45lf6l8b61 round[ 9].is_box  895a43e485l88fe82dl2l068cbd8ced8 round[ 
9].is_row  89d8l0e8855ace682d1843d8cb128fe4 round[ 9].im_col  ef053f7c8b3d32fd4d2a64ad3c9307la 
round[ 9].ik_sch  8c56dff0825dd3f9805ad3fc8659d7fd round[10].istart  
6353e08c0960e104cd70b751bacad0e7 round[10].is_box  0050a0f04090e03080d02070c01060b0 
round[10].is_row  00102030405060708090a0b0c0d0e0f0 round[10].ik_sch  
000l02030405060708090a0b0c0d0e0f round[10].ioutput 001l2233445566778899aabbccddeeff

C.2 AES-192 (N£=6, N 12)
PLAINTEXT: 00l12233445566778899aabbccddeeff
KEY:   000102030405060708090a0b0c0d0e0f1011121314151617

CIPHER (ENCRYPT):
round[ O].input  001l2233445566778899aabbccddeeff round[ 0].k sch  000l02030405060708090a0b0c0d0e0f 
round[ 1].start  00102030405060708090a0b0c0d0e0f0

38




round[ 1].s_box round[ 1].s_row round[ 1].m_col round[ 1].k_sch round[ 2].start round[ 2].s_box 
round[ 2].s_row round[ 2].m_col round[ 2].k_sch round[ 3].start round[ 3].s_box round[ 3].s_row 
round[ 3].m_col round[ 3].k_sch round[ 4].start round[ 4].s_box round[ 4].s_row round[ 4].m_col 
round[ 4].k_sch round[ 5].start round[ 5].s_box round[ 5].s_row round[ 5].m_col round[ 5].k_sch 
round[ 6].start round[ 6].s_box round[ 6].s_row round[ 6].m_col round[ 6].k_sch round[ 7].start 
round[ 7].s_box round[ 7].s_row round[ 7].m_col round[ 7].k_sch round[ 8].start round[ 8].s_box 
round[ 8].s_row round[ 8].m_col round[ 8].k_sch round[ 9].start round[ 9].s_box round[ 9].s_row 
round[ 9].m_col round[ 9].k_sch round[10].start round[10].s_box round[10].s_row round[10].m_col 
round[10].k_sch round[11].start round[11].s_box round[11].s_row round[11].m_col round[11].k_sch 
round[12].start round[12].s_box round[12].s row
63cab7040953d051cd60e0e7ba70e18c 6353e08c0960e104cd70b751bacad0e7 5f72641557f5bc92f7be3b291db9f9la 
10111213141516175846f2f95c43f4fe
4f63760643e0aa85aff8c9d041fa0de4 84fb386f1ae1ac977941dd70832dd769 84eldd691a41d76f792d389783fbac70 
9f487f794f955f662afc86abd7flab29 544afef55847f0fa4856e2e95c43f4fe cb028l8cl7d2af9c62aa64428bb25fd7 
lf770c64f0b579deaaac432c3d37cf0e lfb5430ef0accf64aa370cde3d77792c b7a53ecbbf9d75a0c40efc79b674ccl1 
40f949b31cbabd4d48f043b8l0b7b342 f75c7778a327c8ed8cfebfcla6c37f53 684af5bc0acce85564bb0878242ed2ed 
68cc08ed0abbd2bc642ef555244ae878 7a1e98bdacb6dll4la6944dd06eb2d3e 58el51ab04a2a5557effb54l6245080c 
22ffc9l6a8l474416496fl9c64ae2532 9316dd47c2fa92834390a1de43e43f23 93faal23c2903f4743e4dd83431692de 
aaa755b34cffe57cef6f98elf01c13e6 2ab54bb43a02f8f662e3a95d664l0c08 80121e0776fd1d8a8d8c31bc965d1fee 
cdc972c53854a47e5d64c765904cc028 cd54c7283864c0c55d4c727e90c9a465 921f748fd96e937d622d7725ba8ba50c 
f50l857297448d7ebdf1c6ca87f33e3c 67lef1fd4e2ale03dfdcblef3d789b30 8572a1542fe5727b9e86c8df27bc1404 
85e5c8042f8614549ebcal7b277272df e913e7bl8f507d4b227ef652758acbcc e510976183519b6934157c9ea351f1e0
0c0370d00c01e622166b8accd6db3a2c fe7b5170fe7c8e93477f7e4bf6b9807l fe7c7e7lfe7f807047b95193f67b8e4b 
6cf5edf996eb0a069c4ef21cbfc25762 lea0372a995309l67c439e77ffl205le 7255dad30fb803l0e00d6c6b40d0527c 
40fc5766766c7bcaeld7507f097000l0 406c50l076d70066el7057ca09fc7b7f 7478bcdce8a50b81d4327a9009l88262 
dd7e0e887e2fff68608fc842f9dcc154 a906b254968af4e9b4bdb2d2f0c44336 d36f3720907ebfle8d7a37b58clc1a05 
d37e3705907a1a208d1c371e8c6fbfb5 0d73cc2d8f6abe8b0cf2dd9bb83d422e 859f5f237a8d5a3dc0c02952beefd63a 
88ec930ef5e7e4b6cc32f4c906d294l4 c4cedcabe694694e4b23bfdd6fb522fa c494bffae62322ab4bb5dc4e6fce69dd 
71d720933b6d677dc00b8f28238e0fb7 de60le7827bcdf2ca223800fd8aeda32 afb73eeb1cd1b85162280f27fb20d585 
79a9b2e99c3e6cd1aa3476cc0fb70397 793e76979c3403e9aab7b2dl0fa96ccc

39



round[12].k_sch  a4970a331a78dc09c418c27le3a41d5d round[12].output dda97ca4864cdfe06eaf70a0ec0d7191

INVERSE CIPHER (DECRYPT):
round[ O].iinput  dda97ca4864cdfe06eaf70a0ec0d7191 round[ O].ik_sch  
a4970a331a78dc09c418c27le3a41d5d round[ 1].istart  793e76979c3403e9aab7b2dl0fa96ccc round[ 
l].is_row  79a9b2e99c3e6cd1aa3476cc0fb70397 round[ 1].is_box  afb73eeb1cdlb85162280f27fb20d585 
round[ 1].ik_sch  de60le7827bcdf2ca223800fd8aeda32 round[ 1].ik_add  
7ld720933b6d677dc00b8f28238e0fb7 round[ 2].istart  c494bffae62322ab4bb5dc4e6fce69dd round[ 
2].is_row  c4cedcabe694694e4b23bfdd6fb522fa round[ 2].is_box  88ec930ef5e7e4b6cc32f4c906d294l4 
round[ 2].ik_sch  859f5f237a8d5a3dc0c02952beefd63a round[ 2].ik_add  
0d73cc2d8f6abe8b0cf2dd9bb83d422e round[ 3].istart  d37e3705907a1a208d1c371e8c6fbfb5 round[ 
3].is_row  d36f3720907ebfle8d7a37b58c1cla05 round[ 3].is_box  a906b254968af4e9b4bdb2d2f0c44336 
round[ 3].ik_sch  dd7e0e887e2fff68608fc842f9dcc154 round[ 3].ik_add  
7478bcdce8a50b81d4327a9009188262 round[ 4].istart  406c501076d70066el7057ca09fc7b7f round[ 
4].is_row  40fc5766766c7bcaeld7507f097000l0 round[ 4].is_box  7255dad30fb803l0e00d6c6b40d0527c 
round[ 4].ik_sch  lea0372a995309l67c439e77ff1205le round[ 4].ik_add  
6cf5edf996eb0a069c4ef21cbfc25762 round[ 5].istart  fe7c7e7lfe7f807047b95l93f67b8e4b round[ 
5].is_row  fe7b5l70fe7c8e93477f7e4bf6b9807l round[ 5].is_box  0c0370d00c0le622166b8accd6db3a2c 
round[ 5].ik_sch  e510976l835l9b6934l57c9ea35lf1e0 round[ 5].ik_add  
e913e7bl8f507d4b227ef652758acbcc round[ 6].istart  85e5c8042f8614549ebcal7b277272df round[ 
6].is_row  8572a1542fe5727b9e86c8df27bc1404 round[ 6].is_box  671ef1fd4e2a1e03dfdcblef3d789b30 
round[ 6].ik_sch  f50l857297448d7ebdf1c6ca87f33e3c round[ 6].ik_add  
921f748fd96e937d622d7725ba8ba50c round[ 7].istart  cd54c7283864c0c55d4c727e90c9a465 round[ 
7].is_row  cdc972c53854a47e5d64c765904cc028 round[ 7].is_box  8012le0776fd1d8a8d8c3lbc965d1fee 
round[ 7].ik_sch  2ab54bb43a02f8f662e3a95d664l0c08 round[ 7].ik_add  
aaa755b34cffe57cef6f98elf01c13e6 round[ 8].istart  93faal23c2903f4743e4dd83431692de round[ 
8].is_row  9316dd47c2fa92834390alde43e43f23 round[ 8].is_box  22ffc916a8l474416496fl9c64ae2532 
round[ 8].ik_sch  58el51ab04a2a5557effb5416245080c round[ 8].ik_add  
7a1e98bdacb6dll41a6944dd06eb2d3e round[ 9].istart  68cc08ed0abbd2bc642ef555244ae878 round[ 
9].is_row  684af5bc0acce85564bb0878242ed2ed round[ 9].is_box  f75c7778a327c8ed8cfebfcla6c37f53 
round[ 9].ik_sch  40f949b3lcbabd4d48f043b8l0b7b342 round[ 9].ik_add  
b7a53ecbbf9d75a0c40efc79b674ccl1 round[10].istart  lfb5430ef0accf64aa370cde3d77792c 
round[10].is_row  lf770c64f0b579deaaac432c3d37cf0e round[10].is_box  
cb028l8c17d2af9c62aa64428bb25fd7 round[10].ik_sch  544afef55847f0fa4856e2e95c43f4fe 
round[10].ik_add  9f487f794f955f662afc86abd7flab29 round[11].istart  
84eldd691a4ld76f792d389783fbac70

40




round[11].is_row round[11].is_box round[11].ik_sch round[11].ik_add round[12].istart 
round[12].is_row round[12].is_box round[12].ik_sch round[12].ioutput

EQUIVALENT INVERSE
round[ O].iinput round[ O].ik_sch round[ 1].istart round[ 1].is_box round[ 1].is_row round[ 
1].im_col round[ 1].ik_sch round[ 2].istart round[ 2].is_box round[ 2].is_row round[ 2].im_col 
round[ 2].ik_sch round[ 3].istart round[ 3].is_box round[ 3].is_row round[ 3].im_col round[ 
3].ik_sch round[ 4].istart round[ 4].is_box round[ 4].is_row round[ 4].im_col round[ 4].ik_sch 
round[ 5].istart round[ 5].is_box round[ 5].is_row round[ 5].im_col round[ 5].ik_sch round[ 
6].istart round[ 6].is_box round[ 6].is_row round[ 6].im_col round[ 6].ik_sch round[ 7].istart 
round[ 7].is_box round[ 7].is_row round[ 7].im_col round[ 7].ik_sch round[ 8].istart round[ 
8].is_box round[ 8].is_row round[ 8].im_col round[ 8].ik_sch round[ 9].istart round[ 9].is_box 
round[ 9].is_row round[ 9].im_col
84fb386f1ae1ac977941dd70832dd769 4f63760643e0aa85aff8c9d041fa0de4 10111213141516175846f2f95c43f4fe
5f72641557f5bc92f7be3b29ldb9f9la 6353e08c0960el04cd70b75lbacad0e7 63cab7040953d051cd60e0e7ba70e18c 
00102030405060708090a0b0c0d0e0f0
000l02030405060708090a0b0c0d0e0f
001l2233445566778899aabbccddeeff

CIPHER (DECRYPT):
dda97ca4864cdfe06eaf70a0ec0d7191 a4970a331a78dc09c418c27le3a41d5d 793e76979c3403e9aab7b2dl0fa96ccc 
afdl0f851c28d5eb62203e5lfbb7b827 afb73eeb1cdlb85162280f27fb20d585 l22a02f7242ac8e20605afce51cc7264 
d6bebd0dc209ea494db073803e02lbb9 c494bffae62322ab4bb5dc4e6fce69dd 88e7f414f532940eccd293b606ece4c9 
88ec930ef5e7e4b6cc32f4c906d294l4 5cc7aecce3c872l94ae5ef8309a933c7 8fb999c973b26839c7f9d89d85c68c72 
d37e3705907a1a208d1c371e8c6fbfb5 a98ab23696bd4354b4c4b2e9f006f4d2 a906b254968af4e9b4bdb2d2f0c44336 
b71l3edl34e85489b20866b5ld4b2c3b f77d6ecl423f54ef53783l7fl4b75744 406c501076d70066el7057ca09fc7b7f 
72b86c7c0f0d52d3e0d0da104055036b 7255dad30fb803l0e00d6c6b40d0527c ef3blbelb9b0e64bdcb79f1e0a707fbb 
l147659047cf663b9b0ece8dfc0bf1f0 fe7c7e7lfe7f807047b95l93f67b8e4b 0c0l8a2c0c6b3ad016db7022d603e6cc 
0c0370d00c0le622166b8accd6db3a2c 592460b248832b2952e0b83l923048f1
dccla8b667053f7dcc5cl94ab5423a2e 85e5c8042f8614549ebcal7b277272df 672ab1304edc9bfddf78fl033dleleef 
671ef1fd4e2a1e03dfdcblef3d789b30 0b8a7783417ae3alf9492dc0c64la7ce c6deb0ab79le2364a4055fbe568803ab 
cd54c7283864c0c55d4c727e90c9a465 80fd31ee768c1f078d5dle8a96121dbc 8012le0776fd1d8a8d8c3lbc965d1fee 
4eelddf930ld6352c9ad769ef8d205l5 dd1b7cdaf28d5cl58a49ab1dbbc497cb 93faa123c2903f4743e4dd83431692de 
2214f132a89625l664aec94l64ff749c 22ffc916a8l474416496fl9c64ae2532 l008ffe53b36ee6af27b42549b8a7bb7 
78c4f708318d3cd69655b70lbfc093cf 68cc08ed0abbd2bc642ef555244ae878 f727bf53a3fe7f788cc377eda65cc8c1 
f75c7778a327c8ed8cfebfcla6c37f53 7f69ac1ed939ebaac8ece3cbl2el59e3

41



round[ 9].ik_sch  60dcef10299524ce62dbef152f9620cf round[10].istart  
lfb5430ef0accf64aa370cde3d77792c round[10].is_box cbd264d717aa5f8c62b28l9c8b02af42 round[10].is_row 
cb02818c17d2af9c62aa64428bb25fd7 round[10].im_col cfafl6b2570c18b52e7fef50cab267ae round[10].ik_sch 
4b4ecbdb4d4dcfda5752d7c74949cbde round[11].istart 84eldd691a4ld76f792d389783fbac70 round[11].is_box 
4fe0c9e443f80d06affa76854163aad0 round[11].is_row 4f63760643e0aa85aff8c9d041fa0de4 round[11].im_col 
794cf89ll77bfdld8a327086f3831b39 round[11].ik_sch 1a1f181d1e1b1c194742c7d74949cbde round[12].istart 
6353e08c0960e104cd70b751bacad0e7 round[12].is_box 0050a0f04090e03080d02070c01060b0 round[12].is_row 
00102030405060708090a0b0c0d0e0f0 round[12].ik_sch 000l02030405060708090a0b0c0d0e0f 
round[12].ioutput 00ll2233445566778899aabbccddeeff

C.3  AES-256 (N  8, N 14)
PLAINTEXT: 001l2233445566778899aabbccddeeff
KEY:   000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f

CIPHER (ENCRYPT):
round[ O].input  00112233445566778899aabbccddeeff round[ O].k_sch  000l02030405060708090a0b0c0d0e0f 
round[ 1].start  00102030405060708090a0b0c0d0e0f0 round[ 1].s_box  63cab7040953d051cd60e0e7ba70e18c 
round[ 1].s_row  6353e08c0960e104cd70b751bacad0e7 round[ 1].m_col  5f7264l557f5bc92f7be3b29ldb9f9la 
round[ 1].k_sch  1011l213141516l718191a1blc1d1e1f round[ 2].start  4f63760643e0aa85efa7213201a4e705 
round[ 2].s_box  84fb386flaelac97df5cfd237c49946b round[ 2].s_row  84elfd6b1a5c946fdf4938977cfbac23 
round[ 2].m_col  bd2a395d2b6ac438dl92443e6l5dal95 round[ 2].k_sch  a573c29fa176c498a97fce93a572c09c 
round[ 3].start  l859fbc28a1c00a078ed8aadc42f6109 round[ 3].s_box  adcb0f257e9c63e0bc557e95lc15ef01 
round[ 3].s_row  ad9c7e0l7e55ef25bc150fe0lccb6395 round[ 3].m_col  8l0dce0cc9db8l72b3678c1e88alb5bd 
round[ 3].k_sch  l65la8cd0244bedala5da4cl0640bade round[ 4].start  975c66clcb9f3fa8a93a28df8eel0f63 
round[ 4].s_box  884a3378lfdb75c2d380349el9f876fb round[ 4].s_row  88db34fb1f807678d3f833c2l94a759e 
round[ 4].m_col  b2822d8labe6fb275fafl03a078c0033 round[ 4].k_sch  ae87dff00ffl1b68a68ed5fb03fc1567 
round[ 5].start  1c05f271a417e04ff921c5c104701554 round[ 5].s_box  9c6b89a349f0el8499fda678f25l5920 
round[ 5].s_row  9cf0a62049fd59a399518984f26be178 round[ 5].m_col  aeb65ba974e0f822d73f567bdb64c877 
round[ 5].k_sch  6delf1486fa54f9275f8eb5373b8518d round[ 6].start  c357aael1b45b7b0a2c7bd28a8dc99fa 
round[ 6].s_box  2e5bacf8af6ea9e73ac67a34c286ee2d round[ 6].s_row  2e6e7a2dafc6eef83a86ace7c25ba934 
round[ 6].m_col  b95lc33c02e9bd29ae25cdblefa08cc7 round[ 6].k_sch  c656827fc9a799l76f294cec6cd5598b 
round[ 7].start  7f074l43cb4e243ecl0c8l5d8375d54c round[ 7].s_box  d2c583la1f2f36b278fe0c4cec9d0329

42




round[ 7].s_row round[ 7].m_col round[ 7].k_sch round[ 8].start round[ 8].s_box round[ 8].s_row 
round[ 8].m_col round[ 8].k_sch round[ 9].start round[ 9].s_box round[ 9].s_row round[ 9].m_col 
round[ 9].k_sch round[10].start round[10].s_box round[10].s_row round[10].m_col round[10].k_sch 
round[11].start round[11].s_box round[11].s_row round[11].m_col round[11].k_sch round[12].start 
round[12].s_box round[12].s_row round[12].m_col round[12].k_sch round[13].start round[13].s_box 
round[13].s_row round[13].m_col round[13].k_sch round[14].start round[14].s_box round[14].s_row 
round[14].k_sch round[14].output
d22f0c291ffe03la789d83b2ecc5364c ebb19e1c3ee7c9e87d7535e9ed6b9144 3de23a75524775e727bf9eb45407cf39 
d653a4696ca0bc0f5acaab5db96c5e7d f6ed49f950e06576be74624c565058ff f6e062ff507458f9be50497656ed654c 
5l74c8669da98435a8b3e62ca974a5ea 0bdc905fc27b0948ad5245a4cl87lc2f 5aa858395fd28d7d05e1a38868f3b9c5 
bec26al2cfb55dff6bf80ac4450d56a6 beb50aa6cff856l26b0d6aff45c25dc4 0f77ee3ld2ccadc05430a83f4ef96ac3 
45f5a66017b2d387300d4d33640a820a
4a82485lc57e7e47643de50c2af3e8c9 d61352dla6f3f3a04327d9fee50d9bdd d6f3d9dda6279bd1430d52a0e5l3f3fe 
bd86f0ea748fc4f4630fl1cle9331233 7ccff7lcbeb4fe54l3e6bbf0d26la7df cl4907f6ca3b3aa070e9aa3l3b52b5ec 
783bc54274e280e05lleacc7e200d5ce 78e2acce74led5425l00c5e0e23b80c7 af86904l5d6eldd387e5fbedd5c89013 
f01afafee7a82979d7a5644ab3afe640 5f9c6abfbac634aa50409fa766677653 cfde0208f4b418ac5309db5c338538ed 
cfb4dbedf4093808538502ac33de185c 7427fae4d8a695269ce83d3l5be0392b 254lfe7l9bf500258813bbd55a721c0a 
516604954353950314fb86e401922521
dl33f22alaed2a7bfa0f44697c4f3ffd dled44fd1a0f3f2afa4ff27b7c332a69 2c21a820306fl54ab7l2c75eee0da04f 
4e5a6699a9f24fe07e572baacdf8cdea 627bceb9999d5aaac945ecf423f56da5 aa2l8b56ee5ebeacdd6ecebf26e63c06 
aa5ece06ee6e3c56dde68bac262lbebf 24fc79ccbf0979e9371ac23c6d68de36 8ea2b7ca516745bfeafc49904b496089

INVERSE CIPHER (DECRYPT) :
round[ O].iinput  8ea2b7ca516745bfeafc49904b496089 round[ O].ik_sch  
24fc79ccbf0979e937lac23c6d68de36 round[ 1].istart  aa5ece06ee6e3c56dde68bac262lbebf round[ 
1].is_row  aa218b56ee5ebeacdd6ecebf26e63c06 round[ 1].is_box  627bceb9999d5aaac945ecf423f56da5 
round[ 1].ik_sch  4e5a6699a9f24fe07e572baacdf8cdea round[ 1].ik_add  
2c2la820306f154ab712c75eee0da04f round[ 2].istart  dled44fd1a0f3f2afa4ff27b7c332a69 round[ 
2].is_row  dl33f22a1aed2a7bfa0f44697c4f3ffd round[ 2].is_box  5l66049543539503l4fb86e40192252l 
round[ 2].ik_sch  254lfe7l9bf500258813bbd55a721c0a round[ 2].ik_add  
7427fae4d8a695269ce83d315be0392b round[ 3].istart  cfb4dbedf4093808538502ac33de185c round[ 
3].is_row  cfde0208f4b418ac5309db5c338538ed round[ 3].is_box  5f9c6abfbac634aa50409fa766677653 
round[ 3].ik_sch  f01afafee7a82979d7a5644ab3afe640 round[ 3].ik_add  
af86904l5d6e1dd387e5fbedd5c890l3

43




round[ 4].istart round[ 4].is_row round[ 4].is_box round[ 4].ik_sch round[ 4].ik_add round[ 
5].istart round[ 5].is_row round[ 5].is_box round[ 5].ik_sch round[ 5].ik_add round[ 6].istart 
round[ 6].is_row round[ 6].is_box round[ 6].ik_sch round[ 6].ik_add round[ 7].istart round[ 
7].is_row round[ 7].is_box round[ 7].ik_sch round[ 7].ik_add round[ 8].istart round[ 8].is_row 
round[ 8].is_box round[ 8].ik_sch round[ 8].ik_add round[ 9].istart round[ 9].is_row round[ 
9].is_box round[ 9].ik_sch round[ 9].ik_add round[10].istart round[10].is_row round[10].is_box 
round[10].ik_sch round[10].ik add round[11].istart round[11].is_row round[11].is_box round[11].ik 
sch round[11].ik add round[12].istart round[12].is_row round[12].is_box round[12].ik_sch 
round[12].ik add round[13].istart round[13].is_row round[13].is_box round[13].ik sch round[13].ik 
add round[14].istart round[14].is_row round[14].is_box round[14].ik_sch round[14].ioutput

EQUIVALENT INVERSE
78e2acce74led5425l00c5e0e23b80c7 783bc54274e280e05l1eacc7e200d5ce c14907f6ca3b3aa070e9aa3l3b52b5ec 
7ccff71cbeb4fe5413e6bbf0d26la7df bd86f0ea748fc4f4630fllcle9331233 d6f3d9dda6279bd1430d52a0e513f3fe 
d61352dla6f3f3a04327d9fee50d9bdd 4a82485lc57e7e47643de50c2af3e8c9 45f5a66017b2d387300d4d33640a820a
0f77ee3ld2ccadc05430a83f4ef96ac3 beb50aa6cff856l26b0d6aff45c25dc4 bec26a12cfb55dff6bf80ac4450d56a6 
5aa858395fd28d7d05e1a38868f3b9c5 0bdc905fc27b0948ad5245a4c1871c2f 5174c8669da98435a8b3e62ca974a5ea 
f6e062ff507458f9be50497656ed654c f6ed49f950e06576be74624c565058ff d653a4696ca0bc0f5acaab5db96c5e7d 
3de23a75524775e727bf9eb45407cf39 ebbl9elc3ee7c9e87d7535e9ed6b9144 d22f0c291ffe03la789d83b2ecc5364c 
d2c5831alf2f36b278fe0c4cec9d0329 7f074143cb4e243ecl0c815d8375d54c c656827fc9a799l76f294cec6cd5598b 
b95lc33c02e9bd29ae25cdblefa08cc7 2e6e7a2dafc6eef83a86ace7c25ba934 2e5bacf8af6ea9e73ac67a34c286ee2d 
c357aael1b45b7b0a2c7bd28a8dc99fa 6delf1486fa54f9275f8eb5373b8518d aeb65ba974e0f822d73f567bdb64c877 
9cf0a62049fd59a399518984f26be178
9c6b89a349f0e18499fda678f25l5920 lc05f27la4l7e04ff921c5cl04701554 ae87dff00ffl1b68a68ed5fb03fc1567 
b2822d8labe6fb275fafl03a078c0033 88db34fb1f807678d3f833c2l94a759e 884a33781fdb75c2d380349el9f876fb 
975c66clcb9f3fa8a93a28df8eel0f63 l65la8cd0244beda1a5da4cl0640bade 8l0dce0cc9db8l72b3678cle88alb5bd 
ad9c7e0l7e55ef25bc150fe0lccb6395 adcb0f257e9c63e0bc557e95lc15ef0l l859fbc28alc00a078ed8aadc42f6109 
a573c29fa176c498a97fce93a572c09c bd2a395d2b6ac438dl92443e615da195 84elfd6b1a5c946fdf4938977cfbac23 
84fb386f1ae1ac97df5cfd237c49946b 4f63760643e0aa85efa7213201a4e705
101112131415161718191a1b1c1d1e1f
5f7264l557f5bc92f7be3b29ldb9f9la 6353e08c0960e104cd70b751bacad0e7 63cab7040953d051cd60e0e7ba70e18c 
00102030405060708090a0b0c0d0e0f0
000102030405060708090a0b0c0d0e0f
001l2233445566778899aabbccddeeff CIPHER (DECRYPT):
44




round[ O].iinput round[ O].ik_sch round[ 1].istart round[ 1].is_box round[ 1].is_row round[ 
1].im_col round[ 1].ik_sch round[ 2].istart round[ 2].is_box round[ 2].is_row round[ 2].im_col 
round[ 2].ik_sch round[ 3].istart round[ 3].is_box round[ 3].is_row round[ 3].im_col round[ 
3].ik_sch round[ 4].istart round[ 4].is_box round[ 4].is_row round[ 4].im_col round[ 4].ik_sch 
round[ 5].istart round[ 5].is_box round[ 5].is_row round[ 5].im_col round[ 5].ik_sch round[ 
6].istart round[ 6].is_box round[ 6].is_row round[ 6].im_col round[ 6].ik_sch round[ 7].istart 
round[ 7].is_box round[ 7].is_row round[ 7].im_col round[ 7].ik_sch round[ 8].istart round[ 
8].is_box round[ 8].is_row round[ 8].im_col round[ 8].ik_sch round[ 9].istart round[ 9].is_box 
round[ 9].is_row round[ 9].im_col round[ 9].ik_sch round[10].istart round[10].is_box 
round[10].is_row round[10].im_col round[10].ik_sch round[11].istart round[11].is_box 
round[11].is_row round[11].im_col round[11].ik_sch
8ea2b7ca516745bfeafc49904b496089 24fc79ccbf0979e937lac23c6d68de36 aa5ece06ee6e3c56dde68bac262lbebf 
629deca599456db9c9f5ceaa237b5af4 627bceb9999d5aaac945ecf423f56da5 e51c9502a5cl950506a6l024596b2b07
34fld1ffbfceaa2ffce9e25f2558016e dled44fd1a0f3f2afa4ff27b7c332a69 5153862l43fb259514920403016695e4
5l66049543539503l4fb86e40192252l
9la29306cc450d0226f4b5eaef5efed8 5e1648eb384c350a7571b746dc80e684
cfb4dbedf4093808538502ac33de185c 5fc69f53ba4076bf50676aaa669c34a7 5f9c6abfbac634aa50409fa766677653 
b04la94eff2lae9212278d903b8a63f6 c8a305808b3f7bd043274870d9ble331 78e2acce74led5425l00c5e0e23b80c7 
cl3baaeccae9b5f6705207a03b493a31 cl4907f6ca3b3aa070e9aa3l3b52b5ec 638357cec07de6300e30d0ec4ce2a23c 
b5708e13665a7de14d3d824ca9fl51c2 d6f3d9dda6279bd1430d52a0e513f3fe 4a7ee5c9c53de85l64f348472a827e0c 
4a82485lc57e7e47643de50c2af3e8c9 ca6f71058c642842a315595fdf54f685
74da7ba3439c7e50c81833a09a96ab41 beb50aa6cff856l26b0d6aff45c25dc4 5ad2a3c55felb93905f3587d68a88d88 
5aa858395fd28d7d05e1a38868f3b9c5 ca46f5ea835eab0b9537b6dbb22lb6c2 3ca697l5d32af3f22b67ffade4ccd38e 
f6e062ff507458f9be50497656ed654c d6a0ab7d6cca5e695a6ca40fb953bc5d d653a4696ca0bc0f5acaab5db96c5e7d 
2a70c8da28b806e9f319ce42be4baead f85fc4f3374605f38b844df0528e98e1 d22f0c291ffe03la789d83b2ecc5364c 
7f4e814ccb0cd543cl754l3e8307245d 7f074143cb4e243ecl0c8l5d8375d54c f0073ab7404a8alfc2cba0b80df085l7 
de69409aef8c64e7f84d0c5fcfab2c23 2e6e7a2dafc6eef83a86ace7c25ba934 c345bdfalbc799ela2dcaab0a857b728 
c357aael1b45b7b0a2c7bd28a8dc99fa 3225fe3686e498a32593cl872b6l3469
aed55816cfl9cl00bcc24803d90ad5l1 9cf0a62049fd59a399518984f26be178
1c17c554a4211571f970f24f0405e0c1
1c05f27la417e04ff921c5c104701554
9d1d5c462e655205c4395b7a2eac55e2 l5c668bd3le5247dl7cl68b837e6207c 88db34fb1f807678d3f833c2l94a759e 
979f2863cb3a0fc1a9e166a88e5c3fdf 975c66clcb9f3fa8a93a28df8eel0f63 d24bfb0e1f997633cfce86e37903fe87 
7fd7850f61cc991673db890365c89dl2

45




round[12].istart round[12].is_box round[12].is_row round[12].im_col round[12].ik_sch 
round[13].istart round[13].is_box round[13].is_row round[13].im_col round[13].ik_sch 
round[14].istart round[14].is_box round[14].is_row round[14].ik_sch round[14].ioutput

ad9c7e0l7e55ef25bcl50fe0lccb6395 l81c8a098aed6lc2782ffba0c45900ad l859fbc28alc00a078ed8aadc42f6109 
aec9bda23e7fd8aff96d74525cdce4e7 2a2840c924234cc026244cc5202748c4
84elfd6b1a5c946fdf4938977cfbac23 4fe0210543a7e706efa476850163aa32
4f63760643e0aa85efa72l3201a4e705 794cf89l177bfd1ddf67a744acd9c4f6 1a1fl81d1e1b1cl912171015l6131411
6353e08c0960e104cd70b751bacad0e7 0050a0f04090e03080d02070c01060b0
00102030405060708090a0b0c0d0e0f0
000l02030405060708090a0b0c0d0e0f
00112233445566778899aabbccddeeff






































46




Appendix D - References

[i]     AES page available via http://www.nist.gov/CryptoToolkit.⁴
[2]    Computer Security Objects Register (CSOR): http://csrc.nist.Nov/csor/.
[3]    J. Daemen and V. Rijmen, AES Proposal.‘ Rijndael, AES Algorithm Submission, September 3, 
1999, available at [1].
[4]    J. Daemen and V. Rijmen, The block cipher Rijndael, Smart Card research and Applications, 
LNCS 1820, Springer-Verlag, pp. 288-296.
[5]     B. Gladman's AES related home page http://fp.gladman.plus.com/cryptosraphy technology/.
[6]    A. Lee, NIST Special Publication 800-21, Guideline for Implementing Cryptography in the 
Federal Government, National Institute of Standards and Technology, November 1999.
[7]    A. Menezes, P. van Oorschot, and S. Vanstone, Handbook ofApplied Cryptography,
CRC Press, New York, 1997, p. 81-83.
[8]    J. Nechvatal, et. al., Report on the Development of the Advanced Encryption Standard (AES), 
National Institute of Standards and Technology, October 2, 2000, available at [I].
























A complete set of documentation from the AES development effor—t including announcements, public 
comments,
analysis papers, conference proceedings, etc. — is available from this site.


47
